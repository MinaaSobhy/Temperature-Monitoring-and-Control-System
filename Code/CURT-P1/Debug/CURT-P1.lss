
CURT-P1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e8c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00002e8c  00002f00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002568  00000000  00000000  00003028  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000da8  00000000  00000000  00005590  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  000064d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  000066ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00008ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00009e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b034  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000b1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000b4ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000be58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <main>
      7a:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e7       	ldi	r26, 0x7E	; 126
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e7       	ldi	r24, 0x7E	; 126
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6e e7       	ldi	r22, 0x7E	; 126
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 00 17 	jmp	0x2e00	; 0x2e00 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 00 17 	jmp	0x2e00	; 0x2e00 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	ea 57       	subi	r30, 0x7A	; 122
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <DCmotor_init>:
#include "DCmotor.h"


/* setting output pins for the motor and set an initializing value for them */
void DCmotor_init(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	/* configure pins (PB4 and PB5) as output pins */
	GPIO_setupPinDirection(DCmotor_PORTA,DCmotor_PINA, PIN_OUTPUT);
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	65 e0       	ldi	r22, 0x05	; 5
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCmotor_PORTB,DCmotor_PINB, PIN_OUTPUT);
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	64 e0       	ldi	r22, 0x04	; 4
     e34:	41 e0       	ldi	r20, 0x01	; 1
     e36:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_setupPinDirection>


	/* Clear the two bits to stop the motor at the beginning */
	GPIO_writePin(DCmotor_PORTA,DCmotor_PINA, LOGIC_LOW);
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	65 e0       	ldi	r22, 0x05	; 5
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
	GPIO_writePin(DCmotor_PORTB,DCmotor_PINB, LOGIC_LOW);
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	64 e0       	ldi	r22, 0x04	; 4
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
}
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <DCmotor_info>:

/* setting the speed and the direction of the motor according to the input */
void DCmotor_info(uint8 speed,uint8 dirc)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <DCmotor_info+0x6>
     e5a:	0f 92       	push	r0
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	8a 83       	std	Y+2, r24	; 0x02
     e62:	6b 83       	std	Y+3, r22	; 0x03

		//to stop the motor when the temperature is lower than 20
		if (speed == 19)
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	83 31       	cpi	r24, 0x13	; 19
     e68:	59 f4       	brne	.+22     	; 0xe80 <DCmotor_info+0x2c>
		{
			GPIO_writePin(DCmotor_PORTA,DCmotor_PINA, LOGIC_LOW);
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	65 e0       	ldi	r22, 0x05	; 5
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
			GPIO_writePin(DCmotor_PORTB,DCmotor_PINB, LOGIC_LOW);
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	64 e0       	ldi	r22, 0x04	; 4
     e78:	40 e0       	ldi	r20, 0x00	; 0
     e7a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
     e7e:	36 c0       	rjmp	.+108    	; 0xeec <DCmotor_info+0x98>

		/*rotate the motor ACW if the input is 'F'
	 	  by setting mode: PINA:High , PINB:LOW
	 	  or rotate CW if the input is 'B'
	 	  by setting mode: PINA:LOW , PINB:HIGH*/
		if (dirc == 'F')
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	86 34       	cpi	r24, 0x46	; 70
     e84:	59 f4       	brne	.+22     	; 0xe9c <DCmotor_info+0x48>
		{
			GPIO_writePin(DCmotor_PORTA,DCmotor_PINA, LOGIC_HIGH);
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	65 e0       	ldi	r22, 0x05	; 5
     e8a:	41 e0       	ldi	r20, 0x01	; 1
     e8c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
			GPIO_writePin(DCmotor_PORTB,DCmotor_PINB, LOGIC_LOW);
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	64 e0       	ldi	r22, 0x04	; 4
     e94:	40 e0       	ldi	r20, 0x00	; 0
     e96:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
     e9a:	0d c0       	rjmp	.+26     	; 0xeb6 <DCmotor_info+0x62>
		}
		else if (dirc=='B')
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	82 34       	cpi	r24, 0x42	; 66
     ea0:	51 f4       	brne	.+20     	; 0xeb6 <DCmotor_info+0x62>
		{
			GPIO_writePin(DCmotor_PORTA,DCmotor_PINA, LOGIC_LOW);
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	65 e0       	ldi	r22, 0x05	; 5
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
			GPIO_writePin(DCmotor_PORTB,DCmotor_PINB, LOGIC_HIGH);
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	64 e0       	ldi	r22, 0x04	; 4
     eb0:	41 e0       	ldi	r20, 0x01	; 1
     eb2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
		}

		/* convert the speed form percentage (between 20 to 40) to bits
		 * according to the register size(256)*/

		uint8 speed_bit =(((speed-19)*100)/21) * (256/100);
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	84 e6       	ldi	r24, 0x64	; 100
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	ac 01       	movw	r20, r24
     ec2:	24 9f       	mul	r18, r20
     ec4:	c0 01       	movw	r24, r0
     ec6:	25 9f       	mul	r18, r21
     ec8:	90 0d       	add	r25, r0
     eca:	34 9f       	mul	r19, r20
     ecc:	90 0d       	add	r25, r0
     ece:	11 24       	eor	r1, r1
     ed0:	8c 56       	subi	r24, 0x6C	; 108
     ed2:	97 40       	sbci	r25, 0x07	; 7
     ed4:	25 e1       	ldi	r18, 0x15	; 21
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	b9 01       	movw	r22, r18
     eda:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__divmodhi4>
     ede:	cb 01       	movw	r24, r22
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	89 83       	std	Y+1, r24	; 0x01

		/* calling PWM function to generate the speed required by the motor */
		PWM_Timer0_Start(speed_bit);
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <PWM_Timer0_Start>

}
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <ADC_init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <ADC_init+0x6>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 11 to choose to use the internal 2.56 Volt reference voltage
	 * ADLAR   = 0 right adjusted
	 */
	ADMUX = ( ADMUX & (0x3F) ) | ( (Config_Ptr->ref_volt)<<6 );
     f06:	a7 e2       	ldi	r26, 0x27	; 39
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e7 e2       	ldi	r30, 0x27	; 39
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	28 2f       	mov	r18, r24
     f12:	2f 73       	andi	r18, 0x3F	; 63
     f14:	e9 81       	ldd	r30, Y+1	; 0x01
     f16:	fa 81       	ldd	r31, Y+2	; 0x02
     f18:	80 81       	ld	r24, Z
     f1a:	88 2f       	mov	r24, r24
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	00 24       	eor	r0, r0
     f20:	96 95       	lsr	r25
     f22:	87 95       	ror	r24
     f24:	07 94       	ror	r0
     f26:	96 95       	lsr	r25
     f28:	87 95       	ror	r24
     f2a:	07 94       	ror	r0
     f2c:	98 2f       	mov	r25, r24
     f2e:	80 2d       	mov	r24, r0
     f30:	82 2b       	or	r24, r18
     f32:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 * depending on what the user will choose
	 */
	ADCSRA |= (1<<ADEN) ;
     f34:	a6 e2       	ldi	r26, 0x26	; 38
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e6 e2       	ldi	r30, 0x26	; 38
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	80 68       	ori	r24, 0x80	; 128
     f40:	8c 93       	st	X, r24
	ADCSRA = (ADCSRA & (0xF8)) | (Config_Ptr->prescaler);
     f42:	a6 e2       	ldi	r26, 0x26	; 38
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e6 e2       	ldi	r30, 0x26	; 38
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	98 2f       	mov	r25, r24
     f4e:	98 7f       	andi	r25, 0xF8	; 248
     f50:	e9 81       	ldd	r30, Y+1	; 0x01
     f52:	fa 81       	ldd	r31, Y+2	; 0x02
     f54:	81 81       	ldd	r24, Z+1	; 0x01
     f56:	89 2b       	or	r24, r25
     f58:	8c 93       	st	X, r24
}
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <ADC_read>:

uint16 ADC_read(uint8 channel)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	89 83       	std	Y+1, r24	; 0x01
	    channel &= 0x07; /* Input channel number must be from 0 --> 7 */
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	87 70       	andi	r24, 0x07	; 7
     f74:	89 83       	std	Y+1, r24	; 0x01
		ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     f76:	a7 e2       	ldi	r26, 0x27	; 39
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e7 e2       	ldi	r30, 0x27	; 39
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	80 7e       	andi	r24, 0xE0	; 224
     f82:	8c 93       	st	X, r24
		ADMUX = ADMUX | channel; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     f84:	a7 e2       	ldi	r26, 0x27	; 39
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e7 e2       	ldi	r30, 0x27	; 39
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	90 81       	ld	r25, Z
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	89 2b       	or	r24, r25
     f92:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
     f94:	a6 e2       	ldi	r26, 0x26	; 38
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e6 e2       	ldi	r30, 0x26	; 38
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 64       	ori	r24, 0x40	; 64
     fa0:	8c 93       	st	X, r24
		while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
     fa2:	e6 e2       	ldi	r30, 0x26	; 38
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	88 2f       	mov	r24, r24
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	80 71       	andi	r24, 0x10	; 16
     fae:	90 70       	andi	r25, 0x00	; 0
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	b9 f3       	breq	.-18     	; 0xfa2 <ADC_read+0x3e>
		SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
     fb4:	a6 e2       	ldi	r26, 0x26	; 38
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e6 e2       	ldi	r30, 0x26	; 38
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	80 61       	ori	r24, 0x10	; 16
     fc0:	8c 93       	st	X, r24
		return ADC; /* Read the digital value from the data register */
     fc2:	e4 e2       	ldi	r30, 0x24	; 36
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01

}
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <GPIO_setupPinDirection+0x6>
     fd8:	00 d0       	rcall	.+0      	; 0xfda <GPIO_setupPinDirection+0x8>
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	6a 83       	std	Y+2, r22	; 0x02
     fe4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	88 30       	cpi	r24, 0x08	; 8
     fea:	08 f0       	brcs	.+2      	; 0xfee <GPIO_setupPinDirection+0x1c>
     fec:	d5 c0       	rjmp	.+426    	; 0x1198 <GPIO_setupPinDirection+0x1c6>
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	84 30       	cpi	r24, 0x04	; 4
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <GPIO_setupPinDirection+0x24>
     ff4:	d1 c0       	rjmp	.+418    	; 0x1198 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	3d 83       	std	Y+5, r19	; 0x05
     ffe:	2c 83       	std	Y+4, r18	; 0x04
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	9d 81       	ldd	r25, Y+5	; 0x05
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	91 05       	cpc	r25, r1
    1008:	09 f4       	brne	.+2      	; 0x100c <GPIO_setupPinDirection+0x3a>
    100a:	43 c0       	rjmp	.+134    	; 0x1092 <GPIO_setupPinDirection+0xc0>
    100c:	2c 81       	ldd	r18, Y+4	; 0x04
    100e:	3d 81       	ldd	r19, Y+5	; 0x05
    1010:	22 30       	cpi	r18, 0x02	; 2
    1012:	31 05       	cpc	r19, r1
    1014:	2c f4       	brge	.+10     	; 0x1020 <GPIO_setupPinDirection+0x4e>
    1016:	8c 81       	ldd	r24, Y+4	; 0x04
    1018:	9d 81       	ldd	r25, Y+5	; 0x05
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	71 f0       	breq	.+28     	; 0x103a <GPIO_setupPinDirection+0x68>
    101e:	bc c0       	rjmp	.+376    	; 0x1198 <GPIO_setupPinDirection+0x1c6>
    1020:	2c 81       	ldd	r18, Y+4	; 0x04
    1022:	3d 81       	ldd	r19, Y+5	; 0x05
    1024:	22 30       	cpi	r18, 0x02	; 2
    1026:	31 05       	cpc	r19, r1
    1028:	09 f4       	brne	.+2      	; 0x102c <GPIO_setupPinDirection+0x5a>
    102a:	5f c0       	rjmp	.+190    	; 0x10ea <GPIO_setupPinDirection+0x118>
    102c:	8c 81       	ldd	r24, Y+4	; 0x04
    102e:	9d 81       	ldd	r25, Y+5	; 0x05
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	91 05       	cpc	r25, r1
    1034:	09 f4       	brne	.+2      	; 0x1038 <GPIO_setupPinDirection+0x66>
    1036:	85 c0       	rjmp	.+266    	; 0x1142 <GPIO_setupPinDirection+0x170>
    1038:	af c0       	rjmp	.+350    	; 0x1198 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	a1 f4       	brne	.+40     	; 0x1068 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1040:	aa e3       	ldi	r26, 0x3A	; 58
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	ea e3       	ldi	r30, 0x3A	; 58
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <GPIO_setupPinDirection+0x8c>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <GPIO_setupPinDirection+0x88>
    1062:	84 2b       	or	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	98 c0       	rjmp	.+304    	; 0x1198 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1068:	aa e3       	ldi	r26, 0x3A	; 58
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	ea e3       	ldi	r30, 0x3A	; 58
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <GPIO_setupPinDirection+0xb4>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <GPIO_setupPinDirection+0xb0>
    108a:	80 95       	com	r24
    108c:	84 23       	and	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	83 c0       	rjmp	.+262    	; 0x1198 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	a1 f4       	brne	.+40     	; 0x10c0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1098:	a7 e3       	ldi	r26, 0x37	; 55
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e7 e3       	ldi	r30, 0x37	; 55
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <GPIO_setupPinDirection+0xe4>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <GPIO_setupPinDirection+0xe0>
    10ba:	84 2b       	or	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	6c c0       	rjmp	.+216    	; 0x1198 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10c0:	a7 e3       	ldi	r26, 0x37	; 55
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e7 e3       	ldi	r30, 0x37	; 55
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <GPIO_setupPinDirection+0x10c>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <GPIO_setupPinDirection+0x108>
    10e2:	80 95       	com	r24
    10e4:	84 23       	and	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	57 c0       	rjmp	.+174    	; 0x1198 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	a1 f4       	brne	.+40     	; 0x1118 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    10f0:	a4 e3       	ldi	r26, 0x34	; 52
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e4 e3       	ldi	r30, 0x34	; 52
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <GPIO_setupPinDirection+0x13c>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <GPIO_setupPinDirection+0x138>
    1112:	84 2b       	or	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	40 c0       	rjmp	.+128    	; 0x1198 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1118:	a4 e3       	ldi	r26, 0x34	; 52
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e4 e3       	ldi	r30, 0x34	; 52
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <GPIO_setupPinDirection+0x164>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <GPIO_setupPinDirection+0x160>
    113a:	80 95       	com	r24
    113c:	84 23       	and	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	2b c0       	rjmp	.+86     	; 0x1198 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	a1 f4       	brne	.+40     	; 0x1170 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1148:	a1 e3       	ldi	r26, 0x31	; 49
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e1 e3       	ldi	r30, 0x31	; 49
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <GPIO_setupPinDirection+0x194>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <GPIO_setupPinDirection+0x190>
    116a:	84 2b       	or	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1170:	a1 e3       	ldi	r26, 0x31	; 49
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e1 e3       	ldi	r30, 0x31	; 49
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <GPIO_setupPinDirection+0x1bc>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <GPIO_setupPinDirection+0x1b8>
    1192:	80 95       	com	r24
    1194:	84 23       	and	r24, r20
    1196:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <GPIO_writePin+0x6>
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <GPIO_writePin+0x8>
    11b0:	0f 92       	push	r0
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	6a 83       	std	Y+2, r22	; 0x02
    11ba:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	88 30       	cpi	r24, 0x08	; 8
    11c0:	08 f0       	brcs	.+2      	; 0x11c4 <GPIO_writePin+0x1c>
    11c2:	d5 c0       	rjmp	.+426    	; 0x136e <GPIO_writePin+0x1c6>
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	84 30       	cpi	r24, 0x04	; 4
    11c8:	08 f0       	brcs	.+2      	; 0x11cc <GPIO_writePin+0x24>
    11ca:	d1 c0       	rjmp	.+418    	; 0x136e <GPIO_writePin+0x1c6>
		{
			/* Do Nothing */
		}
	else
	{
		switch (port_num)
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	3d 83       	std	Y+5, r19	; 0x05
    11d4:	2c 83       	std	Y+4, r18	; 0x04
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	91 05       	cpc	r25, r1
    11de:	09 f4       	brne	.+2      	; 0x11e2 <GPIO_writePin+0x3a>
    11e0:	43 c0       	rjmp	.+134    	; 0x1268 <GPIO_writePin+0xc0>
    11e2:	2c 81       	ldd	r18, Y+4	; 0x04
    11e4:	3d 81       	ldd	r19, Y+5	; 0x05
    11e6:	22 30       	cpi	r18, 0x02	; 2
    11e8:	31 05       	cpc	r19, r1
    11ea:	2c f4       	brge	.+10     	; 0x11f6 <GPIO_writePin+0x4e>
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	9d 81       	ldd	r25, Y+5	; 0x05
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	71 f0       	breq	.+28     	; 0x1210 <GPIO_writePin+0x68>
    11f4:	bc c0       	rjmp	.+376    	; 0x136e <GPIO_writePin+0x1c6>
    11f6:	2c 81       	ldd	r18, Y+4	; 0x04
    11f8:	3d 81       	ldd	r19, Y+5	; 0x05
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <GPIO_writePin+0x5a>
    1200:	5f c0       	rjmp	.+190    	; 0x12c0 <GPIO_writePin+0x118>
    1202:	8c 81       	ldd	r24, Y+4	; 0x04
    1204:	9d 81       	ldd	r25, Y+5	; 0x05
    1206:	83 30       	cpi	r24, 0x03	; 3
    1208:	91 05       	cpc	r25, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <GPIO_writePin+0x66>
    120c:	85 c0       	rjmp	.+266    	; 0x1318 <GPIO_writePin+0x170>
    120e:	af c0       	rjmp	.+350    	; 0x136e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID :
			if(value == LOGIC_HIGH)
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	a1 f4       	brne	.+40     	; 0x123e <GPIO_writePin+0x96>
						{
							SET_BIT(PORTA,pin_num);
    1216:	ab e3       	ldi	r26, 0x3B	; 59
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	eb e3       	ldi	r30, 0x3B	; 59
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <GPIO_writePin+0x8c>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <GPIO_writePin+0x88>
    1238:	84 2b       	or	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	98 c0       	rjmp	.+304    	; 0x136e <GPIO_writePin+0x1c6>
						}
						else
						{
							CLEAR_BIT(PORTA,pin_num);
    123e:	ab e3       	ldi	r26, 0x3B	; 59
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	eb e3       	ldi	r30, 0x3B	; 59
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <GPIO_writePin+0xb4>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <GPIO_writePin+0xb0>
    1260:	80 95       	com	r24
    1262:	84 23       	and	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	83 c0       	rjmp	.+262    	; 0x136e <GPIO_writePin+0x1c6>
						}
			break;
		case PORTB_ID :
					if(value == LOGIC_HIGH)
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	a1 f4       	brne	.+40     	; 0x1296 <GPIO_writePin+0xee>
								{
									SET_BIT(PORTB,pin_num);
    126e:	a8 e3       	ldi	r26, 0x38	; 56
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e8 e3       	ldi	r30, 0x38	; 56
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <GPIO_writePin+0xe4>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <GPIO_writePin+0xe0>
    1290:	84 2b       	or	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	6c c0       	rjmp	.+216    	; 0x136e <GPIO_writePin+0x1c6>
								}
								else
								{
									CLEAR_BIT(PORTB,pin_num);
    1296:	a8 e3       	ldi	r26, 0x38	; 56
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e8 e3       	ldi	r30, 0x38	; 56
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <GPIO_writePin+0x10c>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <GPIO_writePin+0x108>
    12b8:	80 95       	com	r24
    12ba:	84 23       	and	r24, r20
    12bc:	8c 93       	st	X, r24
    12be:	57 c0       	rjmp	.+174    	; 0x136e <GPIO_writePin+0x1c6>
								}
					break;
		case PORTC_ID :
					if(value == LOGIC_HIGH)
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	a1 f4       	brne	.+40     	; 0x12ee <GPIO_writePin+0x146>
								{
									SET_BIT(PORTC,pin_num);
    12c6:	a5 e3       	ldi	r26, 0x35	; 53
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e5 e3       	ldi	r30, 0x35	; 53
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <GPIO_writePin+0x13c>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <GPIO_writePin+0x138>
    12e8:	84 2b       	or	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	40 c0       	rjmp	.+128    	; 0x136e <GPIO_writePin+0x1c6>
								}
								else
								{
									CLEAR_BIT(PORTC,pin_num);
    12ee:	a5 e3       	ldi	r26, 0x35	; 53
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e5 e3       	ldi	r30, 0x35	; 53
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	48 2f       	mov	r20, r24
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 2e       	mov	r0, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <GPIO_writePin+0x164>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	0a 94       	dec	r0
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <GPIO_writePin+0x160>
    1310:	80 95       	com	r24
    1312:	84 23       	and	r24, r20
    1314:	8c 93       	st	X, r24
    1316:	2b c0       	rjmp	.+86     	; 0x136e <GPIO_writePin+0x1c6>
								}
					break;
		case PORTD_ID :
					if(value == LOGIC_HIGH)
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	a1 f4       	brne	.+40     	; 0x1346 <GPIO_writePin+0x19e>
								{
									SET_BIT(PORTD,pin_num);
    131e:	a2 e3       	ldi	r26, 0x32	; 50
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e2 e3       	ldi	r30, 0x32	; 50
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 2e       	mov	r0, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <GPIO_writePin+0x194>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <GPIO_writePin+0x190>
    1340:	84 2b       	or	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	14 c0       	rjmp	.+40     	; 0x136e <GPIO_writePin+0x1c6>
								}
								else
								{
									CLEAR_BIT(PORTD,pin_num);
    1346:	a2 e3       	ldi	r26, 0x32	; 50
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e2 e3       	ldi	r30, 0x32	; 50
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <GPIO_writePin+0x1bc>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <GPIO_writePin+0x1b8>
    1368:	80 95       	com	r24
    136a:	84 23       	and	r24, r20
    136c:	8c 93       	st	X, r24
								}
					break;
		}
	}

}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	00 d0       	rcall	.+0      	; 0x1384 <GPIO_readPin+0x6>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <GPIO_readPin+0x8>
    1386:	0f 92       	push	r0
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	8a 83       	std	Y+2, r24	; 0x02
    138e:	6b 83       	std	Y+3, r22	; 0x03
    uint8 pin_value = LOGIC_LOW;
    1390:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	88 30       	cpi	r24, 0x08	; 8
    1396:	08 f0       	brcs	.+2      	; 0x139a <GPIO_readPin+0x1c>
    1398:	84 c0       	rjmp	.+264    	; 0x14a2 <GPIO_readPin+0x124>
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	84 30       	cpi	r24, 0x04	; 4
    139e:	08 f0       	brcs	.+2      	; 0x13a2 <GPIO_readPin+0x24>
    13a0:	80 c0       	rjmp	.+256    	; 0x14a2 <GPIO_readPin+0x124>
			{
				/* Do nothing */
			}
	else
	{
		switch(port_num)
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3d 83       	std	Y+5, r19	; 0x05
    13aa:	2c 83       	std	Y+4, r18	; 0x04
    13ac:	4c 81       	ldd	r20, Y+4	; 0x04
    13ae:	5d 81       	ldd	r21, Y+5	; 0x05
    13b0:	41 30       	cpi	r20, 0x01	; 1
    13b2:	51 05       	cpc	r21, r1
    13b4:	79 f1       	breq	.+94     	; 0x1414 <GPIO_readPin+0x96>
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	91 05       	cpc	r25, r1
    13be:	34 f4       	brge	.+12     	; 0x13cc <GPIO_readPin+0x4e>
    13c0:	2c 81       	ldd	r18, Y+4	; 0x04
    13c2:	3d 81       	ldd	r19, Y+5	; 0x05
    13c4:	21 15       	cp	r18, r1
    13c6:	31 05       	cpc	r19, r1
    13c8:	69 f0       	breq	.+26     	; 0x13e4 <GPIO_readPin+0x66>
    13ca:	6b c0       	rjmp	.+214    	; 0x14a2 <GPIO_readPin+0x124>
    13cc:	4c 81       	ldd	r20, Y+4	; 0x04
    13ce:	5d 81       	ldd	r21, Y+5	; 0x05
    13d0:	42 30       	cpi	r20, 0x02	; 2
    13d2:	51 05       	cpc	r21, r1
    13d4:	b9 f1       	breq	.+110    	; 0x1444 <GPIO_readPin+0xc6>
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	9d 81       	ldd	r25, Y+5	; 0x05
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	09 f4       	brne	.+2      	; 0x13e2 <GPIO_readPin+0x64>
    13e0:	49 c0       	rjmp	.+146    	; 0x1474 <GPIO_readPin+0xf6>
    13e2:	5f c0       	rjmp	.+190    	; 0x14a2 <GPIO_readPin+0x124>
		{
		case PORTA_ID : if(BIT_IS_SET(PINA,pin_num))
    13e4:	e9 e3       	ldi	r30, 0x39	; 57
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	a9 01       	movw	r20, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <GPIO_readPin+0x7e>
    13f8:	55 95       	asr	r21
    13fa:	47 95       	ror	r20
    13fc:	8a 95       	dec	r24
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <GPIO_readPin+0x7a>
    1400:	ca 01       	movw	r24, r20
    1402:	81 70       	andi	r24, 0x01	; 1
    1404:	90 70       	andi	r25, 0x00	; 0
    1406:	88 23       	and	r24, r24
    1408:	19 f0       	breq	.+6      	; 0x1410 <GPIO_readPin+0x92>
		{
			pin_value = LOGIC_HIGH ;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	49 c0       	rjmp	.+146    	; 0x14a2 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1410:	19 82       	std	Y+1, r1	; 0x01
    1412:	47 c0       	rjmp	.+142    	; 0x14a2 <GPIO_readPin+0x124>
		}
		break;
		case PORTB_ID : if(BIT_IS_SET(PINB,pin_num))
    1414:	e6 e3       	ldi	r30, 0x36	; 54
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a9 01       	movw	r20, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <GPIO_readPin+0xae>
    1428:	55 95       	asr	r21
    142a:	47 95       	ror	r20
    142c:	8a 95       	dec	r24
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <GPIO_readPin+0xaa>
    1430:	ca 01       	movw	r24, r20
    1432:	81 70       	andi	r24, 0x01	; 1
    1434:	90 70       	andi	r25, 0x00	; 0
    1436:	88 23       	and	r24, r24
    1438:	19 f0       	breq	.+6      	; 0x1440 <GPIO_readPin+0xc2>
		{
			pin_value = LOGIC_HIGH ;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	31 c0       	rjmp	.+98     	; 0x14a2 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1440:	19 82       	std	Y+1, r1	; 0x01
    1442:	2f c0       	rjmp	.+94     	; 0x14a2 <GPIO_readPin+0x124>
		}
		break;
		case PORTC_ID : if(BIT_IS_SET(PINC,pin_num))
    1444:	e3 e3       	ldi	r30, 0x33	; 51
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a9 01       	movw	r20, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <GPIO_readPin+0xde>
    1458:	55 95       	asr	r21
    145a:	47 95       	ror	r20
    145c:	8a 95       	dec	r24
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <GPIO_readPin+0xda>
    1460:	ca 01       	movw	r24, r20
    1462:	81 70       	andi	r24, 0x01	; 1
    1464:	90 70       	andi	r25, 0x00	; 0
    1466:	88 23       	and	r24, r24
    1468:	19 f0       	breq	.+6      	; 0x1470 <GPIO_readPin+0xf2>
		{
			pin_value = LOGIC_HIGH ;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	19 c0       	rjmp	.+50     	; 0x14a2 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1470:	19 82       	std	Y+1, r1	; 0x01
    1472:	17 c0       	rjmp	.+46     	; 0x14a2 <GPIO_readPin+0x124>
		}
		break;

		case PORTD_ID : if(BIT_IS_SET(PIND,pin_num))
    1474:	e0 e3       	ldi	r30, 0x30	; 48
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a9 01       	movw	r20, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <GPIO_readPin+0x10e>
    1488:	55 95       	asr	r21
    148a:	47 95       	ror	r20
    148c:	8a 95       	dec	r24
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <GPIO_readPin+0x10a>
    1490:	ca 01       	movw	r24, r20
    1492:	81 70       	andi	r24, 0x01	; 1
    1494:	90 70       	andi	r25, 0x00	; 0
    1496:	88 23       	and	r24, r24
    1498:	19 f0       	breq	.+6      	; 0x14a0 <GPIO_readPin+0x122>
		{
			pin_value = LOGIC_HIGH ;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    14a0:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
		}
	}
    return pin_value ;
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <GPIO_setupPortDirection+0x6>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <GPIO_setupPortDirection+0x8>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	84 30       	cpi	r24, 0x04	; 4
    14c8:	90 f5       	brcc	.+100    	; 0x152e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3c 83       	std	Y+4, r19	; 0x04
    14d2:	2b 83       	std	Y+3, r18	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	d1 f0       	breq	.+52     	; 0x1512 <GPIO_setupPortDirection+0x5e>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <GPIO_setupPortDirection+0x3e>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	61 f0       	breq	.+24     	; 0x1508 <GPIO_setupPortDirection+0x54>
    14f0:	1e c0       	rjmp	.+60     	; 0x152e <GPIO_setupPortDirection+0x7a>
    14f2:	2b 81       	ldd	r18, Y+3	; 0x03
    14f4:	3c 81       	ldd	r19, Y+4	; 0x04
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	81 f0       	breq	.+32     	; 0x151c <GPIO_setupPortDirection+0x68>
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	81 f0       	breq	.+32     	; 0x1526 <GPIO_setupPortDirection+0x72>
    1506:	13 c0       	rjmp	.+38     	; 0x152e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1508:	ea e3       	ldi	r30, 0x3A	; 58
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	80 83       	st	Z, r24
    1510:	0e c0       	rjmp	.+28     	; 0x152e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1512:	e7 e3       	ldi	r30, 0x37	; 55
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	80 83       	st	Z, r24
    151a:	09 c0       	rjmp	.+18     	; 0x152e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    151c:	e4 e3       	ldi	r30, 0x34	; 52
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	80 83       	st	Z, r24
    1524:	04 c0       	rjmp	.+8      	; 0x152e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1526:	e1 e3       	ldi	r30, 0x31	; 49
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	80 83       	st	Z, r24
			break;
		}
	}
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num , uint8 value)
{
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <GPIO_writePort+0x6>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <GPIO_writePort+0x8>
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	84 30       	cpi	r24, 0x04	; 4
    1550:	90 f5       	brcc	.+100    	; 0x15b6 <GPIO_writePort+0x7a>
		{
			/* Do Nothing */
		}
	else
	{
	  switch (port_num)
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	3c 83       	std	Y+4, r19	; 0x04
    155a:	2b 83       	std	Y+3, r18	; 0x03
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	91 05       	cpc	r25, r1
    1564:	d1 f0       	breq	.+52     	; 0x159a <GPIO_writePort+0x5e>
    1566:	2b 81       	ldd	r18, Y+3	; 0x03
    1568:	3c 81       	ldd	r19, Y+4	; 0x04
    156a:	22 30       	cpi	r18, 0x02	; 2
    156c:	31 05       	cpc	r19, r1
    156e:	2c f4       	brge	.+10     	; 0x157a <GPIO_writePort+0x3e>
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	61 f0       	breq	.+24     	; 0x1590 <GPIO_writePort+0x54>
    1578:	1e c0       	rjmp	.+60     	; 0x15b6 <GPIO_writePort+0x7a>
    157a:	2b 81       	ldd	r18, Y+3	; 0x03
    157c:	3c 81       	ldd	r19, Y+4	; 0x04
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	81 f0       	breq	.+32     	; 0x15a4 <GPIO_writePort+0x68>
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	91 05       	cpc	r25, r1
    158c:	81 f0       	breq	.+32     	; 0x15ae <GPIO_writePort+0x72>
    158e:	13 c0       	rjmp	.+38     	; 0x15b6 <GPIO_writePort+0x7a>
	  {
	  case PORTA_ID : PORTA = value;
    1590:	eb e3       	ldi	r30, 0x3B	; 59
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	80 83       	st	Z, r24
    1598:	0e c0       	rjmp	.+28     	; 0x15b6 <GPIO_writePort+0x7a>
	  break;
	  case PORTB_ID : PORTB = value;
    159a:	e8 e3       	ldi	r30, 0x38	; 56
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	80 83       	st	Z, r24
    15a2:	09 c0       	rjmp	.+18     	; 0x15b6 <GPIO_writePort+0x7a>
	  break;
	  case PORTC_ID : PORTC = value;
    15a4:	e5 e3       	ldi	r30, 0x35	; 53
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	80 83       	st	Z, r24
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <GPIO_writePort+0x7a>
	  break;
	  case PORTD_ID : PORTD = value;
    15ae:	e2 e3       	ldi	r30, 0x32	; 50
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	80 83       	st	Z, r24
	  break;

	  }
	}
}
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <GPIO_readPort+0x6>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <GPIO_readPort+0x8>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    15d2:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS))
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	84 30       	cpi	r24, 0x04	; 4
    15d8:	90 f5       	brcc	.+100    	; 0x163e <GPIO_readPort+0x7a>
				/* Do nothing */
			}

	else
	{
		switch (port_num)
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	3c 83       	std	Y+4, r19	; 0x04
    15e2:	2b 83       	std	Y+3, r18	; 0x03
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	91 05       	cpc	r25, r1
    15ec:	d1 f0       	breq	.+52     	; 0x1622 <GPIO_readPort+0x5e>
    15ee:	2b 81       	ldd	r18, Y+3	; 0x03
    15f0:	3c 81       	ldd	r19, Y+4	; 0x04
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	2c f4       	brge	.+10     	; 0x1602 <GPIO_readPort+0x3e>
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	61 f0       	breq	.+24     	; 0x1618 <GPIO_readPort+0x54>
    1600:	1e c0       	rjmp	.+60     	; 0x163e <GPIO_readPort+0x7a>
    1602:	2b 81       	ldd	r18, Y+3	; 0x03
    1604:	3c 81       	ldd	r19, Y+4	; 0x04
    1606:	22 30       	cpi	r18, 0x02	; 2
    1608:	31 05       	cpc	r19, r1
    160a:	81 f0       	breq	.+32     	; 0x162c <GPIO_readPort+0x68>
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	83 30       	cpi	r24, 0x03	; 3
    1612:	91 05       	cpc	r25, r1
    1614:	81 f0       	breq	.+32     	; 0x1636 <GPIO_readPort+0x72>
    1616:	13 c0       	rjmp	.+38     	; 0x163e <GPIO_readPort+0x7a>
		{
		case PORTA_ID : value = PINA;
    1618:	e9 e3       	ldi	r30, 0x39	; 57
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	0e c0       	rjmp	.+28     	; 0x163e <GPIO_readPort+0x7a>
		break;
		case PORTB_ID : value = PINB;
    1622:	e6 e3       	ldi	r30, 0x36	; 54
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	09 c0       	rjmp	.+18     	; 0x163e <GPIO_readPort+0x7a>
		break;
		case PORTC_ID : value = PINC;
    162c:	e3 e3       	ldi	r30, 0x33	; 51
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	04 c0       	rjmp	.+8      	; 0x163e <GPIO_readPort+0x7a>
		break;
		case PORTD_ID : value = PIND;
    1636:	e0 e3       	ldi	r30, 0x30	; 48
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	89 83       	std	Y+1, r24	; 0x01
		break;
		}
	}
  return value ;
    163e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1656:	83 e0       	ldi	r24, 0x03	; 3
    1658:	65 e0       	ldi	r22, 0x05	; 5
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1660:	83 e0       	ldi	r24, 0x03	; 3
    1662:	66 e0       	ldi	r22, 0x06	; 6
    1664:	41 e0       	ldi	r20, 0x01	; 1
    1666:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	67 e0       	ldi	r22, 0x07	; 7
    166e:	41 e0       	ldi	r20, 0x01	; 1
    1670:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_setupPinDirection>

#if (LCD_DATA_BITS_MODE == 4)

	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID,PIN_OUTPUT);
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	64 e0       	ldi	r22, 0x04	; 4
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+1,PIN_OUTPUT);
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	65 e0       	ldi	r22, 0x05	; 5
    1682:	41 e0       	ldi	r20, 0x01	; 1
    1684:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,PIN_OUTPUT);
    1688:	82 e0       	ldi	r24, 0x02	; 2
    168a:	66 e0       	ldi	r22, 0x06	; 6
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,PIN_OUTPUT);
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	67 e0       	ldi	r22, 0x07	; 7
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_GO_TO_HOME);
    169c:	82 e0       	ldi	r24, 0x02	; 2
    169e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    16a2:	88 e2       	ldi	r24, 0x28	; 40
    16a4:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_sendCommand>
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    16a8:	8c e0       	ldi	r24, 0x0C	; 12
    16aa:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_sendCommand>
}
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	c4 56       	subi	r28, 0x64	; 100
    16c8:	d0 40       	sbci	r29, 0x00	; 0
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	fe 01       	movw	r30, r28
    16d6:	ec 59       	subi	r30, 0x9C	; 156
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    16dc:	fe 01       	movw	r30, r28
    16de:	ed 59       	subi	r30, 0x9D	; 157
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	65 e0       	ldi	r22, 0x05	; 5
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    16ee:	83 e0       	ldi	r24, 0x03	; 3
    16f0:	66 e0       	ldi	r22, 0x06	; 6
    16f2:	40 e0       	ldi	r20, 0x00	; 0
    16f4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
    16f8:	fe 01       	movw	r30, r28
    16fa:	e1 5a       	subi	r30, 0xA1	; 161
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a0 e8       	ldi	r26, 0x80	; 128
    1704:	bf e3       	ldi	r27, 0x3F	; 63
    1706:	80 83       	st	Z, r24
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	a2 83       	std	Z+2, r26	; 0x02
    170c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170e:	8e 01       	movw	r16, r28
    1710:	05 5a       	subi	r16, 0xA5	; 165
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
    1714:	fe 01       	movw	r30, r28
    1716:	e1 5a       	subi	r30, 0xA1	; 161
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	60 81       	ld	r22, Z
    171c:	71 81       	ldd	r23, Z+1	; 0x01
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	4a e7       	ldi	r20, 0x7A	; 122
    1728:	53 e4       	ldi	r21, 0x43	; 67
    172a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	f8 01       	movw	r30, r16
    1734:	80 83       	st	Z, r24
    1736:	91 83       	std	Z+1, r25	; 0x01
    1738:	a2 83       	std	Z+2, r26	; 0x02
    173a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    173c:	fe 01       	movw	r30, r28
    173e:	e5 5a       	subi	r30, 0xA5	; 165
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	60 81       	ld	r22, Z
    1744:	71 81       	ldd	r23, Z+1	; 0x01
    1746:	82 81       	ldd	r24, Z+2	; 0x02
    1748:	93 81       	ldd	r25, Z+3	; 0x03
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e8       	ldi	r20, 0x80	; 128
    1750:	5f e3       	ldi	r21, 0x3F	; 63
    1752:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1756:	88 23       	and	r24, r24
    1758:	44 f4       	brge	.+16     	; 0x176a <LCD_sendCommand+0xb0>
		__ticks = 1;
    175a:	fe 01       	movw	r30, r28
    175c:	e7 5a       	subi	r30, 0xA7	; 167
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	91 83       	std	Z+1, r25	; 0x01
    1766:	80 83       	st	Z, r24
    1768:	64 c0       	rjmp	.+200    	; 0x1832 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    176a:	fe 01       	movw	r30, r28
    176c:	e5 5a       	subi	r30, 0xA5	; 165
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	60 81       	ld	r22, Z
    1772:	71 81       	ldd	r23, Z+1	; 0x01
    1774:	82 81       	ldd	r24, Z+2	; 0x02
    1776:	93 81       	ldd	r25, Z+3	; 0x03
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	3f ef       	ldi	r19, 0xFF	; 255
    177c:	4f e7       	ldi	r20, 0x7F	; 127
    177e:	57 e4       	ldi	r21, 0x47	; 71
    1780:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1784:	18 16       	cp	r1, r24
    1786:	0c f0       	brlt	.+2      	; 0x178a <LCD_sendCommand+0xd0>
    1788:	43 c0       	rjmp	.+134    	; 0x1810 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178a:	fe 01       	movw	r30, r28
    178c:	e1 5a       	subi	r30, 0xA1	; 161
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	60 81       	ld	r22, Z
    1792:	71 81       	ldd	r23, Z+1	; 0x01
    1794:	82 81       	ldd	r24, Z+2	; 0x02
    1796:	93 81       	ldd	r25, Z+3	; 0x03
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e2       	ldi	r20, 0x20	; 32
    179e:	51 e4       	ldi	r21, 0x41	; 65
    17a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	8e 01       	movw	r16, r28
    17aa:	07 5a       	subi	r16, 0xA7	; 167
    17ac:	1f 4f       	sbci	r17, 0xFF	; 255
    17ae:	bc 01       	movw	r22, r24
    17b0:	cd 01       	movw	r24, r26
    17b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	f8 01       	movw	r30, r16
    17bc:	91 83       	std	Z+1, r25	; 0x01
    17be:	80 83       	st	Z, r24
    17c0:	1f c0       	rjmp	.+62     	; 0x1800 <LCD_sendCommand+0x146>
    17c2:	fe 01       	movw	r30, r28
    17c4:	e9 5a       	subi	r30, 0xA9	; 169
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	89 e1       	ldi	r24, 0x19	; 25
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	91 83       	std	Z+1, r25	; 0x01
    17ce:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17d0:	fe 01       	movw	r30, r28
    17d2:	e9 5a       	subi	r30, 0xA9	; 169
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	80 81       	ld	r24, Z
    17d8:	91 81       	ldd	r25, Z+1	; 0x01
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <LCD_sendCommand+0x120>
    17de:	fe 01       	movw	r30, r28
    17e0:	e9 5a       	subi	r30, 0xA9	; 169
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	91 83       	std	Z+1, r25	; 0x01
    17e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e8:	de 01       	movw	r26, r28
    17ea:	a7 5a       	subi	r26, 0xA7	; 167
    17ec:	bf 4f       	sbci	r27, 0xFF	; 255
    17ee:	fe 01       	movw	r30, r28
    17f0:	e7 5a       	subi	r30, 0xA7	; 167
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	80 81       	ld	r24, Z
    17f6:	91 81       	ldd	r25, Z+1	; 0x01
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	11 96       	adiw	r26, 0x01	; 1
    17fc:	9c 93       	st	X, r25
    17fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1800:	fe 01       	movw	r30, r28
    1802:	e7 5a       	subi	r30, 0xA7	; 167
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	80 81       	ld	r24, Z
    1808:	91 81       	ldd	r25, Z+1	; 0x01
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	d1 f6       	brne	.-76     	; 0x17c2 <LCD_sendCommand+0x108>
    180e:	27 c0       	rjmp	.+78     	; 0x185e <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1810:	8e 01       	movw	r16, r28
    1812:	07 5a       	subi	r16, 0xA7	; 167
    1814:	1f 4f       	sbci	r17, 0xFF	; 255
    1816:	fe 01       	movw	r30, r28
    1818:	e5 5a       	subi	r30, 0xA5	; 165
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	60 81       	ld	r22, Z
    181e:	71 81       	ldd	r23, Z+1	; 0x01
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	f8 01       	movw	r30, r16
    182e:	91 83       	std	Z+1, r25	; 0x01
    1830:	80 83       	st	Z, r24
    1832:	de 01       	movw	r26, r28
    1834:	ab 5a       	subi	r26, 0xAB	; 171
    1836:	bf 4f       	sbci	r27, 0xFF	; 255
    1838:	fe 01       	movw	r30, r28
    183a:	e7 5a       	subi	r30, 0xA7	; 167
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	80 81       	ld	r24, Z
    1840:	91 81       	ldd	r25, Z+1	; 0x01
    1842:	8d 93       	st	X+, r24
    1844:	9c 93       	st	X, r25
    1846:	fe 01       	movw	r30, r28
    1848:	eb 5a       	subi	r30, 0xAB	; 171
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	80 81       	ld	r24, Z
    184e:	91 81       	ldd	r25, Z+1	; 0x01
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <LCD_sendCommand+0x196>
    1854:	fe 01       	movw	r30, r28
    1856:	eb 5a       	subi	r30, 0xAB	; 171
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    185e:	83 e0       	ldi	r24, 0x03	; 3
    1860:	67 e0       	ldi	r22, 0x07	; 7
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
    1868:	fe 01       	movw	r30, r28
    186a:	ef 5a       	subi	r30, 0xAF	; 175
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	a0 e8       	ldi	r26, 0x80	; 128
    1874:	bf e3       	ldi	r27, 0x3F	; 63
    1876:	80 83       	st	Z, r24
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	a2 83       	std	Z+2, r26	; 0x02
    187c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187e:	8e 01       	movw	r16, r28
    1880:	03 5b       	subi	r16, 0xB3	; 179
    1882:	1f 4f       	sbci	r17, 0xFF	; 255
    1884:	fe 01       	movw	r30, r28
    1886:	ef 5a       	subi	r30, 0xAF	; 175
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	4a e7       	ldi	r20, 0x7A	; 122
    1898:	53 e4       	ldi	r21, 0x43	; 67
    189a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	f8 01       	movw	r30, r16
    18a4:	80 83       	st	Z, r24
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	a2 83       	std	Z+2, r26	; 0x02
    18aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18ac:	fe 01       	movw	r30, r28
    18ae:	e3 5b       	subi	r30, 0xB3	; 179
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	60 81       	ld	r22, Z
    18b4:	71 81       	ldd	r23, Z+1	; 0x01
    18b6:	82 81       	ldd	r24, Z+2	; 0x02
    18b8:	93 81       	ldd	r25, Z+3	; 0x03
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	44 f4       	brge	.+16     	; 0x18da <LCD_sendCommand+0x220>
		__ticks = 1;
    18ca:	fe 01       	movw	r30, r28
    18cc:	e5 5b       	subi	r30, 0xB5	; 181
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	80 83       	st	Z, r24
    18d8:	64 c0       	rjmp	.+200    	; 0x19a2 <LCD_sendCommand+0x2e8>
	else if (__tmp > 65535)
    18da:	fe 01       	movw	r30, r28
    18dc:	e3 5b       	subi	r30, 0xB3	; 179
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	60 81       	ld	r22, Z
    18e2:	71 81       	ldd	r23, Z+1	; 0x01
    18e4:	82 81       	ldd	r24, Z+2	; 0x02
    18e6:	93 81       	ldd	r25, Z+3	; 0x03
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	3f ef       	ldi	r19, 0xFF	; 255
    18ec:	4f e7       	ldi	r20, 0x7F	; 127
    18ee:	57 e4       	ldi	r21, 0x47	; 71
    18f0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18f4:	18 16       	cp	r1, r24
    18f6:	0c f0       	brlt	.+2      	; 0x18fa <LCD_sendCommand+0x240>
    18f8:	43 c0       	rjmp	.+134    	; 0x1980 <LCD_sendCommand+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fa:	fe 01       	movw	r30, r28
    18fc:	ef 5a       	subi	r30, 0xAF	; 175
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	60 81       	ld	r22, Z
    1902:	71 81       	ldd	r23, Z+1	; 0x01
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	93 81       	ldd	r25, Z+3	; 0x03
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e2       	ldi	r20, 0x20	; 32
    190e:	51 e4       	ldi	r21, 0x41	; 65
    1910:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	8e 01       	movw	r16, r28
    191a:	05 5b       	subi	r16, 0xB5	; 181
    191c:	1f 4f       	sbci	r17, 0xFF	; 255
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	f8 01       	movw	r30, r16
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	80 83       	st	Z, r24
    1930:	1f c0       	rjmp	.+62     	; 0x1970 <LCD_sendCommand+0x2b6>
    1932:	fe 01       	movw	r30, r28
    1934:	e7 5b       	subi	r30, 0xB7	; 183
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	89 e1       	ldi	r24, 0x19	; 25
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	91 83       	std	Z+1, r25	; 0x01
    193e:	80 83       	st	Z, r24
    1940:	fe 01       	movw	r30, r28
    1942:	e7 5b       	subi	r30, 0xB7	; 183
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 81       	ld	r24, Z
    1948:	91 81       	ldd	r25, Z+1	; 0x01
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <LCD_sendCommand+0x290>
    194e:	fe 01       	movw	r30, r28
    1950:	e7 5b       	subi	r30, 0xB7	; 183
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1958:	de 01       	movw	r26, r28
    195a:	a5 5b       	subi	r26, 0xB5	; 181
    195c:	bf 4f       	sbci	r27, 0xFF	; 255
    195e:	fe 01       	movw	r30, r28
    1960:	e5 5b       	subi	r30, 0xB5	; 181
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	80 81       	ld	r24, Z
    1966:	91 81       	ldd	r25, Z+1	; 0x01
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	11 96       	adiw	r26, 0x01	; 1
    196c:	9c 93       	st	X, r25
    196e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1970:	fe 01       	movw	r30, r28
    1972:	e5 5b       	subi	r30, 0xB5	; 181
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	80 81       	ld	r24, Z
    1978:	91 81       	ldd	r25, Z+1	; 0x01
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	d1 f6       	brne	.-76     	; 0x1932 <LCD_sendCommand+0x278>
    197e:	27 c0       	rjmp	.+78     	; 0x19ce <LCD_sendCommand+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1980:	8e 01       	movw	r16, r28
    1982:	05 5b       	subi	r16, 0xB5	; 181
    1984:	1f 4f       	sbci	r17, 0xFF	; 255
    1986:	fe 01       	movw	r30, r28
    1988:	e3 5b       	subi	r30, 0xB3	; 179
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	60 81       	ld	r22, Z
    198e:	71 81       	ldd	r23, Z+1	; 0x01
    1990:	82 81       	ldd	r24, Z+2	; 0x02
    1992:	93 81       	ldd	r25, Z+3	; 0x03
    1994:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	f8 01       	movw	r30, r16
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	de 01       	movw	r26, r28
    19a4:	a9 5b       	subi	r26, 0xB9	; 185
    19a6:	bf 4f       	sbci	r27, 0xFF	; 255
    19a8:	fe 01       	movw	r30, r28
    19aa:	e5 5b       	subi	r30, 0xB5	; 181
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	80 81       	ld	r24, Z
    19b0:	91 81       	ldd	r25, Z+1	; 0x01
    19b2:	8d 93       	st	X+, r24
    19b4:	9c 93       	st	X, r25
    19b6:	fe 01       	movw	r30, r28
    19b8:	e9 5b       	subi	r30, 0xB9	; 185
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	80 81       	ld	r24, Z
    19be:	91 81       	ldd	r25, Z+1	; 0x01
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <LCD_sendCommand+0x306>
    19c4:	fe 01       	movw	r30, r28
    19c6:	e9 5b       	subi	r30, 0xB9	; 185
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	91 83       	std	Z+1, r25	; 0x01
    19cc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <GPIO_readPort>
    19d4:	fe 01       	movw	r30, r28
    19d6:	ed 59       	subi	r30, 0x9D	; 157
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (command & 0xF0);
    19dc:	fe 01       	movw	r30, r28
    19de:	ed 59       	subi	r30, 0x9D	; 157
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	80 81       	ld	r24, Z
    19e4:	98 2f       	mov	r25, r24
    19e6:	9f 70       	andi	r25, 0x0F	; 15
    19e8:	fe 01       	movw	r30, r28
    19ea:	ec 59       	subi	r30, 0x9C	; 156
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	80 81       	ld	r24, Z
    19f0:	80 7f       	andi	r24, 0xF0	; 240
    19f2:	89 2b       	or	r24, r25
    19f4:	fe 01       	movw	r30, r28
    19f6:	ed 59       	subi	r30, 0x9D	; 157
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((command & 0xF0) >> 4);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    19fc:	fe 01       	movw	r30, r28
    19fe:	ed 59       	subi	r30, 0x9D	; 157
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	60 81       	ld	r22, Z
    1a06:	0e 94 9e 0a 	call	0x153c	; 0x153c <GPIO_writePort>
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	ed 5b       	subi	r30, 0xBD	; 189
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a0 e8       	ldi	r26, 0x80	; 128
    1a16:	bf e3       	ldi	r27, 0x3F	; 63
    1a18:	80 83       	st	Z, r24
    1a1a:	91 83       	std	Z+1, r25	; 0x01
    1a1c:	a2 83       	std	Z+2, r26	; 0x02
    1a1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a20:	8e 01       	movw	r16, r28
    1a22:	01 5c       	subi	r16, 0xC1	; 193
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
    1a26:	fe 01       	movw	r30, r28
    1a28:	ed 5b       	subi	r30, 0xBD	; 189
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	60 81       	ld	r22, Z
    1a2e:	71 81       	ldd	r23, Z+1	; 0x01
    1a30:	82 81       	ldd	r24, Z+2	; 0x02
    1a32:	93 81       	ldd	r25, Z+3	; 0x03
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	4a e7       	ldi	r20, 0x7A	; 122
    1a3a:	53 e4       	ldi	r21, 0x43	; 67
    1a3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	f8 01       	movw	r30, r16
    1a46:	80 83       	st	Z, r24
    1a48:	91 83       	std	Z+1, r25	; 0x01
    1a4a:	a2 83       	std	Z+2, r26	; 0x02
    1a4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a4e:	fe 01       	movw	r30, r28
    1a50:	ff 96       	adiw	r30, 0x3f	; 63
    1a52:	60 81       	ld	r22, Z
    1a54:	71 81       	ldd	r23, Z+1	; 0x01
    1a56:	82 81       	ldd	r24, Z+2	; 0x02
    1a58:	93 81       	ldd	r25, Z+3	; 0x03
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e8       	ldi	r20, 0x80	; 128
    1a60:	5f e3       	ldi	r21, 0x3F	; 63
    1a62:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a66:	88 23       	and	r24, r24
    1a68:	2c f4       	brge	.+10     	; 0x1a74 <LCD_sendCommand+0x3ba>
		__ticks = 1;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9e af       	std	Y+62, r25	; 0x3e
    1a70:	8d af       	std	Y+61, r24	; 0x3d
    1a72:	46 c0       	rjmp	.+140    	; 0x1b00 <LCD_sendCommand+0x446>
	else if (__tmp > 65535)
    1a74:	fe 01       	movw	r30, r28
    1a76:	ff 96       	adiw	r30, 0x3f	; 63
    1a78:	60 81       	ld	r22, Z
    1a7a:	71 81       	ldd	r23, Z+1	; 0x01
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	3f ef       	ldi	r19, 0xFF	; 255
    1a84:	4f e7       	ldi	r20, 0x7F	; 127
    1a86:	57 e4       	ldi	r21, 0x47	; 71
    1a88:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a8c:	18 16       	cp	r1, r24
    1a8e:	64 f5       	brge	.+88     	; 0x1ae8 <LCD_sendCommand+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a90:	fe 01       	movw	r30, r28
    1a92:	ed 5b       	subi	r30, 0xBD	; 189
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	60 81       	ld	r22, Z
    1a98:	71 81       	ldd	r23, Z+1	; 0x01
    1a9a:	82 81       	ldd	r24, Z+2	; 0x02
    1a9c:	93 81       	ldd	r25, Z+3	; 0x03
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e2       	ldi	r20, 0x20	; 32
    1aa4:	51 e4       	ldi	r21, 0x41	; 65
    1aa6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	bc 01       	movw	r22, r24
    1ab0:	cd 01       	movw	r24, r26
    1ab2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	9e af       	std	Y+62, r25	; 0x3e
    1abc:	8d af       	std	Y+61, r24	; 0x3d
    1abe:	0f c0       	rjmp	.+30     	; 0x1ade <LCD_sendCommand+0x424>
    1ac0:	89 e1       	ldi	r24, 0x19	; 25
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9c af       	std	Y+60, r25	; 0x3c
    1ac6:	8b af       	std	Y+59, r24	; 0x3b
    1ac8:	8b ad       	ldd	r24, Y+59	; 0x3b
    1aca:	9c ad       	ldd	r25, Y+60	; 0x3c
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <LCD_sendCommand+0x412>
    1ad0:	9c af       	std	Y+60, r25	; 0x3c
    1ad2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ad6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	9e af       	std	Y+62, r25	; 0x3e
    1adc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ade:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ae0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	69 f7       	brne	.-38     	; 0x1ac0 <LCD_sendCommand+0x406>
    1ae6:	16 c0       	rjmp	.+44     	; 0x1b14 <LCD_sendCommand+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae8:	fe 01       	movw	r30, r28
    1aea:	ff 96       	adiw	r30, 0x3f	; 63
    1aec:	60 81       	ld	r22, Z
    1aee:	71 81       	ldd	r23, Z+1	; 0x01
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9e af       	std	Y+62, r25	; 0x3e
    1afe:	8d af       	std	Y+61, r24	; 0x3d
    1b00:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b02:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b04:	9a af       	std	Y+58, r25	; 0x3a
    1b06:	89 af       	std	Y+57, r24	; 0x39
    1b08:	89 ad       	ldd	r24, Y+57	; 0x39
    1b0a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_sendCommand+0x452>
    1b10:	9a af       	std	Y+58, r25	; 0x3a
    1b12:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b14:	83 e0       	ldi	r24, 0x03	; 3
    1b16:	67 e0       	ldi	r22, 0x07	; 7
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	a0 e8       	ldi	r26, 0x80	; 128
    1b24:	bf e3       	ldi	r27, 0x3F	; 63
    1b26:	8d ab       	std	Y+53, r24	; 0x35
    1b28:	9e ab       	std	Y+54, r25	; 0x36
    1b2a:	af ab       	std	Y+55, r26	; 0x37
    1b2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2e:	6d a9       	ldd	r22, Y+53	; 0x35
    1b30:	7e a9       	ldd	r23, Y+54	; 0x36
    1b32:	8f a9       	ldd	r24, Y+55	; 0x37
    1b34:	98 ad       	ldd	r25, Y+56	; 0x38
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	4a e7       	ldi	r20, 0x7A	; 122
    1b3c:	53 e4       	ldi	r21, 0x43	; 67
    1b3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	89 ab       	std	Y+49, r24	; 0x31
    1b48:	9a ab       	std	Y+50, r25	; 0x32
    1b4a:	ab ab       	std	Y+51, r26	; 0x33
    1b4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b50:	7a a9       	ldd	r23, Y+50	; 0x32
    1b52:	8b a9       	ldd	r24, Y+51	; 0x33
    1b54:	9c a9       	ldd	r25, Y+52	; 0x34
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e8       	ldi	r20, 0x80	; 128
    1b5c:	5f e3       	ldi	r21, 0x3F	; 63
    1b5e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b62:	88 23       	and	r24, r24
    1b64:	2c f4       	brge	.+10     	; 0x1b70 <LCD_sendCommand+0x4b6>
		__ticks = 1;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	98 ab       	std	Y+48, r25	; 0x30
    1b6c:	8f a7       	std	Y+47, r24	; 0x2f
    1b6e:	3f c0       	rjmp	.+126    	; 0x1bee <LCD_sendCommand+0x534>
	else if (__tmp > 65535)
    1b70:	69 a9       	ldd	r22, Y+49	; 0x31
    1b72:	7a a9       	ldd	r23, Y+50	; 0x32
    1b74:	8b a9       	ldd	r24, Y+51	; 0x33
    1b76:	9c a9       	ldd	r25, Y+52	; 0x34
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	3f ef       	ldi	r19, 0xFF	; 255
    1b7c:	4f e7       	ldi	r20, 0x7F	; 127
    1b7e:	57 e4       	ldi	r21, 0x47	; 71
    1b80:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b84:	18 16       	cp	r1, r24
    1b86:	4c f5       	brge	.+82     	; 0x1bda <LCD_sendCommand+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b88:	6d a9       	ldd	r22, Y+53	; 0x35
    1b8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e2       	ldi	r20, 0x20	; 32
    1b96:	51 e4       	ldi	r21, 0x41	; 65
    1b98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	98 ab       	std	Y+48, r25	; 0x30
    1bae:	8f a7       	std	Y+47, r24	; 0x2f
    1bb0:	0f c0       	rjmp	.+30     	; 0x1bd0 <LCD_sendCommand+0x516>
    1bb2:	89 e1       	ldi	r24, 0x19	; 25
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	9e a7       	std	Y+46, r25	; 0x2e
    1bb8:	8d a7       	std	Y+45, r24	; 0x2d
    1bba:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bbc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <LCD_sendCommand+0x504>
    1bc2:	9e a7       	std	Y+46, r25	; 0x2e
    1bc4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc8:	98 a9       	ldd	r25, Y+48	; 0x30
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	98 ab       	std	Y+48, r25	; 0x30
    1bce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	69 f7       	brne	.-38     	; 0x1bb2 <LCD_sendCommand+0x4f8>
    1bd8:	14 c0       	rjmp	.+40     	; 0x1c02 <LCD_sendCommand+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bda:	69 a9       	ldd	r22, Y+49	; 0x31
    1bdc:	7a a9       	ldd	r23, Y+50	; 0x32
    1bde:	8b a9       	ldd	r24, Y+51	; 0x33
    1be0:	9c a9       	ldd	r25, Y+52	; 0x34
    1be2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	98 ab       	std	Y+48, r25	; 0x30
    1bec:	8f a7       	std	Y+47, r24	; 0x2f
    1bee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf0:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf2:	9c a7       	std	Y+44, r25	; 0x2c
    1bf4:	8b a7       	std	Y+43, r24	; 0x2b
    1bf6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bf8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_sendCommand+0x540>
    1bfe:	9c a7       	std	Y+44, r25	; 0x2c
    1c00:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	67 e0       	ldi	r22, 0x07	; 7
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a0 e8       	ldi	r26, 0x80	; 128
    1c12:	bf e3       	ldi	r27, 0x3F	; 63
    1c14:	8f a3       	std	Y+39, r24	; 0x27
    1c16:	98 a7       	std	Y+40, r25	; 0x28
    1c18:	a9 a7       	std	Y+41, r26	; 0x29
    1c1a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c1e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c20:	89 a5       	ldd	r24, Y+41	; 0x29
    1c22:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a e7       	ldi	r20, 0x7A	; 122
    1c2a:	53 e4       	ldi	r21, 0x43	; 67
    1c2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8b a3       	std	Y+35, r24	; 0x23
    1c36:	9c a3       	std	Y+36, r25	; 0x24
    1c38:	ad a3       	std	Y+37, r26	; 0x25
    1c3a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c40:	8d a1       	ldd	r24, Y+37	; 0x25
    1c42:	9e a1       	ldd	r25, Y+38	; 0x26
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e8       	ldi	r20, 0x80	; 128
    1c4a:	5f e3       	ldi	r21, 0x3F	; 63
    1c4c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c50:	88 23       	and	r24, r24
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <LCD_sendCommand+0x5a4>
		__ticks = 1;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9a a3       	std	Y+34, r25	; 0x22
    1c5a:	89 a3       	std	Y+33, r24	; 0x21
    1c5c:	3f c0       	rjmp	.+126    	; 0x1cdc <LCD_sendCommand+0x622>
	else if (__tmp > 65535)
    1c5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c60:	7c a1       	ldd	r23, Y+36	; 0x24
    1c62:	8d a1       	ldd	r24, Y+37	; 0x25
    1c64:	9e a1       	ldd	r25, Y+38	; 0x26
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	3f ef       	ldi	r19, 0xFF	; 255
    1c6a:	4f e7       	ldi	r20, 0x7F	; 127
    1c6c:	57 e4       	ldi	r21, 0x47	; 71
    1c6e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	4c f5       	brge	.+82     	; 0x1cc8 <LCD_sendCommand+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c76:	6f a1       	ldd	r22, Y+39	; 0x27
    1c78:	78 a5       	ldd	r23, Y+40	; 0x28
    1c7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e2       	ldi	r20, 0x20	; 32
    1c84:	51 e4       	ldi	r21, 0x41	; 65
    1c86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	9a a3       	std	Y+34, r25	; 0x22
    1c9c:	89 a3       	std	Y+33, r24	; 0x21
    1c9e:	0f c0       	rjmp	.+30     	; 0x1cbe <LCD_sendCommand+0x604>
    1ca0:	89 e1       	ldi	r24, 0x19	; 25
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	98 a3       	std	Y+32, r25	; 0x20
    1ca6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ca8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1caa:	98 a1       	ldd	r25, Y+32	; 0x20
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <LCD_sendCommand+0x5f2>
    1cb0:	98 a3       	std	Y+32, r25	; 0x20
    1cb2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb4:	89 a1       	ldd	r24, Y+33	; 0x21
    1cb6:	9a a1       	ldd	r25, Y+34	; 0x22
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	9a a3       	std	Y+34, r25	; 0x22
    1cbc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	69 f7       	brne	.-38     	; 0x1ca0 <LCD_sendCommand+0x5e6>
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <LCD_sendCommand+0x636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cca:	7c a1       	ldd	r23, Y+36	; 0x24
    1ccc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cce:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	9a a3       	std	Y+34, r25	; 0x22
    1cda:	89 a3       	std	Y+33, r24	; 0x21
    1cdc:	89 a1       	ldd	r24, Y+33	; 0x21
    1cde:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ce2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ce4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ce6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <LCD_sendCommand+0x62e>
    1cec:	9e 8f       	std	Y+30, r25	; 0x1e
    1cee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <GPIO_readPort>
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	ed 59       	subi	r30, 0x9D	; 157
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((command & 0x0F) << 4);
    1cfe:	fe 01       	movw	r30, r28
    1d00:	ed 59       	subi	r30, 0x9D	; 157
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	80 81       	ld	r24, Z
    1d06:	28 2f       	mov	r18, r24
    1d08:	2f 70       	andi	r18, 0x0F	; 15
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	ec 59       	subi	r30, 0x9C	; 156
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 81       	ld	r24, Z
    1d12:	88 2f       	mov	r24, r24
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	82 95       	swap	r24
    1d18:	92 95       	swap	r25
    1d1a:	90 7f       	andi	r25, 0xF0	; 240
    1d1c:	98 27       	eor	r25, r24
    1d1e:	80 7f       	andi	r24, 0xF0	; 240
    1d20:	98 27       	eor	r25, r24
    1d22:	82 2b       	or	r24, r18
    1d24:	fe 01       	movw	r30, r28
    1d26:	ed 59       	subi	r30, 0x9D	; 157
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (command & 0x0F);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ed 59       	subi	r30, 0x9D	; 157
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	60 81       	ld	r22, Z
    1d36:	0e 94 9e 0a 	call	0x153c	; 0x153c <GPIO_writePort>
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a0 e8       	ldi	r26, 0x80	; 128
    1d40:	bf e3       	ldi	r27, 0x3F	; 63
    1d42:	89 8f       	std	Y+25, r24	; 0x19
    1d44:	9a 8f       	std	Y+26, r25	; 0x1a
    1d46:	ab 8f       	std	Y+27, r26	; 0x1b
    1d48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	4a e7       	ldi	r20, 0x7A	; 122
    1d58:	53 e4       	ldi	r21, 0x43	; 67
    1d5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	8d 8b       	std	Y+21, r24	; 0x15
    1d64:	9e 8b       	std	Y+22, r25	; 0x16
    1d66:	af 8b       	std	Y+23, r26	; 0x17
    1d68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d70:	98 8d       	ldd	r25, Y+24	; 0x18
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e8       	ldi	r20, 0x80	; 128
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	2c f4       	brge	.+10     	; 0x1d8c <LCD_sendCommand+0x6d2>
		__ticks = 1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9c 8b       	std	Y+20, r25	; 0x14
    1d88:	8b 8b       	std	Y+19, r24	; 0x13
    1d8a:	3f c0       	rjmp	.+126    	; 0x1e0a <LCD_sendCommand+0x750>
	else if (__tmp > 65535)
    1d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d90:	8f 89       	ldd	r24, Y+23	; 0x17
    1d92:	98 8d       	ldd	r25, Y+24	; 0x18
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	3f ef       	ldi	r19, 0xFF	; 255
    1d98:	4f e7       	ldi	r20, 0x7F	; 127
    1d9a:	57 e4       	ldi	r21, 0x47	; 71
    1d9c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1da0:	18 16       	cp	r1, r24
    1da2:	4c f5       	brge	.+82     	; 0x1df6 <LCD_sendCommand+0x73c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da4:	69 8d       	ldd	r22, Y+25	; 0x19
    1da6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e2       	ldi	r20, 0x20	; 32
    1db2:	51 e4       	ldi	r21, 0x41	; 65
    1db4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	bc 01       	movw	r22, r24
    1dbe:	cd 01       	movw	r24, r26
    1dc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	9c 8b       	std	Y+20, r25	; 0x14
    1dca:	8b 8b       	std	Y+19, r24	; 0x13
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <LCD_sendCommand+0x732>
    1dce:	89 e1       	ldi	r24, 0x19	; 25
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	9a 8b       	std	Y+18, r25	; 0x12
    1dd4:	89 8b       	std	Y+17, r24	; 0x11
    1dd6:	89 89       	ldd	r24, Y+17	; 0x11
    1dd8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <LCD_sendCommand+0x720>
    1dde:	9a 8b       	std	Y+18, r25	; 0x12
    1de0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de2:	8b 89       	ldd	r24, Y+19	; 0x13
    1de4:	9c 89       	ldd	r25, Y+20	; 0x14
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	9c 8b       	std	Y+20, r25	; 0x14
    1dea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dec:	8b 89       	ldd	r24, Y+19	; 0x13
    1dee:	9c 89       	ldd	r25, Y+20	; 0x14
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	69 f7       	brne	.-38     	; 0x1dce <LCD_sendCommand+0x714>
    1df4:	14 c0       	rjmp	.+40     	; 0x1e1e <LCD_sendCommand+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df6:	6d 89       	ldd	r22, Y+21	; 0x15
    1df8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	9c 8b       	std	Y+20, r25	; 0x14
    1e08:	8b 8b       	std	Y+19, r24	; 0x13
    1e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0e:	98 8b       	std	Y+16, r25	; 0x10
    1e10:	8f 87       	std	Y+15, r24	; 0x0f
    1e12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e14:	98 89       	ldd	r25, Y+16	; 0x10
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <LCD_sendCommand+0x75c>
    1e1a:	98 8b       	std	Y+16, r25	; 0x10
    1e1c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	67 e0       	ldi	r22, 0x07	; 7
    1e22:	40 e0       	ldi	r20, 0x00	; 0
    1e24:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	a0 e8       	ldi	r26, 0x80	; 128
    1e2e:	bf e3       	ldi	r27, 0x3F	; 63
    1e30:	8b 87       	std	Y+11, r24	; 0x0b
    1e32:	9c 87       	std	Y+12, r25	; 0x0c
    1e34:	ad 87       	std	Y+13, r26	; 0x0d
    1e36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4a e7       	ldi	r20, 0x7A	; 122
    1e46:	53 e4       	ldi	r21, 0x43	; 67
    1e48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	8f 83       	std	Y+7, r24	; 0x07
    1e52:	98 87       	std	Y+8, r25	; 0x08
    1e54:	a9 87       	std	Y+9, r26	; 0x09
    1e56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e58:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5a:	78 85       	ldd	r23, Y+8	; 0x08
    1e5c:	89 85       	ldd	r24, Y+9	; 0x09
    1e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e8       	ldi	r20, 0x80	; 128
    1e66:	5f e3       	ldi	r21, 0x3F	; 63
    1e68:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e6c:	88 23       	and	r24, r24
    1e6e:	2c f4       	brge	.+10     	; 0x1e7a <LCD_sendCommand+0x7c0>
		__ticks = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
    1e78:	3f c0       	rjmp	.+126    	; 0x1ef8 <LCD_sendCommand+0x83e>
	else if (__tmp > 65535)
    1e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7c:	78 85       	ldd	r23, Y+8	; 0x08
    1e7e:	89 85       	ldd	r24, Y+9	; 0x09
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	3f ef       	ldi	r19, 0xFF	; 255
    1e86:	4f e7       	ldi	r20, 0x7F	; 127
    1e88:	57 e4       	ldi	r21, 0x47	; 71
    1e8a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e8e:	18 16       	cp	r1, r24
    1e90:	4c f5       	brge	.+82     	; 0x1ee4 <LCD_sendCommand+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9e 83       	std	Y+6, r25	; 0x06
    1eb8:	8d 83       	std	Y+5, r24	; 0x05
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <LCD_sendCommand+0x820>
    1ebc:	89 e1       	ldi	r24, 0x19	; 25
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9c 83       	std	Y+4, r25	; 0x04
    1ec2:	8b 83       	std	Y+3, r24	; 0x03
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <LCD_sendCommand+0x80e>
    1ecc:	9c 83       	std	Y+4, r25	; 0x04
    1ece:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	9e 83       	std	Y+6, r25	; 0x06
    1ed8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eda:	8d 81       	ldd	r24, Y+5	; 0x05
    1edc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	69 f7       	brne	.-38     	; 0x1ebc <LCD_sendCommand+0x802>
    1ee2:	14 c0       	rjmp	.+40     	; 0x1f0c <LCD_sendCommand+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee6:	78 85       	ldd	r23, Y+8	; 0x08
    1ee8:	89 85       	ldd	r24, Y+9	; 0x09
    1eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9e 83       	std	Y+6, r25	; 0x06
    1ef6:	8d 83       	std	Y+5, r24	; 0x05
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	9e 81       	ldd	r25, Y+6	; 0x06
    1efc:	9a 83       	std	Y+2, r25	; 0x02
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	9a 81       	ldd	r25, Y+2	; 0x02
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <LCD_sendCommand+0x84a>
    1f08:	9a 83       	std	Y+2, r25	; 0x02
    1f0a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f0c:	cc 59       	subi	r28, 0x9C	; 156
    1f0e:	df 4f       	sbci	r29, 0xFF	; 255
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	1f 91       	pop	r17
    1f20:	0f 91       	pop	r16
    1f22:	08 95       	ret

00001f24 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1f24:	0f 93       	push	r16
    1f26:	1f 93       	push	r17
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	c4 56       	subi	r28, 0x64	; 100
    1f32:	d0 40       	sbci	r29, 0x00	; 0
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	fe 01       	movw	r30, r28
    1f40:	ec 59       	subi	r30, 0x9C	; 156
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    1f46:	fe 01       	movw	r30, r28
    1f48:	ed 59       	subi	r30, 0x9D	; 157
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1f4e:	83 e0       	ldi	r24, 0x03	; 3
    1f50:	65 e0       	ldi	r22, 0x05	; 5
    1f52:	41 e0       	ldi	r20, 0x01	; 1
    1f54:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1f58:	83 e0       	ldi	r24, 0x03	; 3
    1f5a:	66 e0       	ldi	r22, 0x06	; 6
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
    1f62:	fe 01       	movw	r30, r28
    1f64:	e1 5a       	subi	r30, 0xA1	; 161
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	a0 e8       	ldi	r26, 0x80	; 128
    1f6e:	bf e3       	ldi	r27, 0x3F	; 63
    1f70:	80 83       	st	Z, r24
    1f72:	91 83       	std	Z+1, r25	; 0x01
    1f74:	a2 83       	std	Z+2, r26	; 0x02
    1f76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f78:	8e 01       	movw	r16, r28
    1f7a:	05 5a       	subi	r16, 0xA5	; 165
    1f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e1 5a       	subi	r30, 0xA1	; 161
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	4a e7       	ldi	r20, 0x7A	; 122
    1f92:	53 e4       	ldi	r21, 0x43	; 67
    1f94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	f8 01       	movw	r30, r16
    1f9e:	80 83       	st	Z, r24
    1fa0:	91 83       	std	Z+1, r25	; 0x01
    1fa2:	a2 83       	std	Z+2, r26	; 0x02
    1fa4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e5 5a       	subi	r30, 0xA5	; 165
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	60 81       	ld	r22, Z
    1fae:	71 81       	ldd	r23, Z+1	; 0x01
    1fb0:	82 81       	ldd	r24, Z+2	; 0x02
    1fb2:	93 81       	ldd	r25, Z+3	; 0x03
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e8       	ldi	r20, 0x80	; 128
    1fba:	5f e3       	ldi	r21, 0x3F	; 63
    1fbc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fc0:	88 23       	and	r24, r24
    1fc2:	44 f4       	brge	.+16     	; 0x1fd4 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e7 5a       	subi	r30, 0xA7	; 167
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
    1fd2:	64 c0       	rjmp	.+200    	; 0x209c <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e5 5a       	subi	r30, 0xA5	; 165
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	60 81       	ld	r22, Z
    1fdc:	71 81       	ldd	r23, Z+1	; 0x01
    1fde:	82 81       	ldd	r24, Z+2	; 0x02
    1fe0:	93 81       	ldd	r25, Z+3	; 0x03
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	3f ef       	ldi	r19, 0xFF	; 255
    1fe6:	4f e7       	ldi	r20, 0x7F	; 127
    1fe8:	57 e4       	ldi	r21, 0x47	; 71
    1fea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fee:	18 16       	cp	r1, r24
    1ff0:	0c f0       	brlt	.+2      	; 0x1ff4 <LCD_displayCharacter+0xd0>
    1ff2:	43 c0       	rjmp	.+134    	; 0x207a <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e1 5a       	subi	r30, 0xA1	; 161
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	60 81       	ld	r22, Z
    1ffc:	71 81       	ldd	r23, Z+1	; 0x01
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	93 81       	ldd	r25, Z+3	; 0x03
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e2       	ldi	r20, 0x20	; 32
    2008:	51 e4       	ldi	r21, 0x41	; 65
    200a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	8e 01       	movw	r16, r28
    2014:	07 5a       	subi	r16, 0xA7	; 167
    2016:	1f 4f       	sbci	r17, 0xFF	; 255
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	f8 01       	movw	r30, r16
    2026:	91 83       	std	Z+1, r25	; 0x01
    2028:	80 83       	st	Z, r24
    202a:	1f c0       	rjmp	.+62     	; 0x206a <LCD_displayCharacter+0x146>
    202c:	fe 01       	movw	r30, r28
    202e:	e9 5a       	subi	r30, 0xA9	; 169
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	89 e1       	ldi	r24, 0x19	; 25
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	80 83       	st	Z, r24
    203a:	fe 01       	movw	r30, r28
    203c:	e9 5a       	subi	r30, 0xA9	; 169
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <LCD_displayCharacter+0x120>
    2048:	fe 01       	movw	r30, r28
    204a:	e9 5a       	subi	r30, 0xA9	; 169
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	91 83       	std	Z+1, r25	; 0x01
    2050:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2052:	de 01       	movw	r26, r28
    2054:	a7 5a       	subi	r26, 0xA7	; 167
    2056:	bf 4f       	sbci	r27, 0xFF	; 255
    2058:	fe 01       	movw	r30, r28
    205a:	e7 5a       	subi	r30, 0xA7	; 167
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	80 81       	ld	r24, Z
    2060:	91 81       	ldd	r25, Z+1	; 0x01
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	11 96       	adiw	r26, 0x01	; 1
    2066:	9c 93       	st	X, r25
    2068:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206a:	fe 01       	movw	r30, r28
    206c:	e7 5a       	subi	r30, 0xA7	; 167
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	80 81       	ld	r24, Z
    2072:	91 81       	ldd	r25, Z+1	; 0x01
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	d1 f6       	brne	.-76     	; 0x202c <LCD_displayCharacter+0x108>
    2078:	27 c0       	rjmp	.+78     	; 0x20c8 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207a:	8e 01       	movw	r16, r28
    207c:	07 5a       	subi	r16, 0xA7	; 167
    207e:	1f 4f       	sbci	r17, 0xFF	; 255
    2080:	fe 01       	movw	r30, r28
    2082:	e5 5a       	subi	r30, 0xA5	; 165
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	60 81       	ld	r22, Z
    2088:	71 81       	ldd	r23, Z+1	; 0x01
    208a:	82 81       	ldd	r24, Z+2	; 0x02
    208c:	93 81       	ldd	r25, Z+3	; 0x03
    208e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	f8 01       	movw	r30, r16
    2098:	91 83       	std	Z+1, r25	; 0x01
    209a:	80 83       	st	Z, r24
    209c:	de 01       	movw	r26, r28
    209e:	ab 5a       	subi	r26, 0xAB	; 171
    20a0:	bf 4f       	sbci	r27, 0xFF	; 255
    20a2:	fe 01       	movw	r30, r28
    20a4:	e7 5a       	subi	r30, 0xA7	; 167
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	80 81       	ld	r24, Z
    20aa:	91 81       	ldd	r25, Z+1	; 0x01
    20ac:	8d 93       	st	X+, r24
    20ae:	9c 93       	st	X, r25
    20b0:	fe 01       	movw	r30, r28
    20b2:	eb 5a       	subi	r30, 0xAB	; 171
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	91 81       	ldd	r25, Z+1	; 0x01
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <LCD_displayCharacter+0x196>
    20be:	fe 01       	movw	r30, r28
    20c0:	eb 5a       	subi	r30, 0xAB	; 171
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20c8:	83 e0       	ldi	r24, 0x03	; 3
    20ca:	67 e0       	ldi	r22, 0x07	; 7
    20cc:	41 e0       	ldi	r20, 0x01	; 1
    20ce:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
    20d2:	fe 01       	movw	r30, r28
    20d4:	ef 5a       	subi	r30, 0xAF	; 175
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a0 e8       	ldi	r26, 0x80	; 128
    20de:	bf e3       	ldi	r27, 0x3F	; 63
    20e0:	80 83       	st	Z, r24
    20e2:	91 83       	std	Z+1, r25	; 0x01
    20e4:	a2 83       	std	Z+2, r26	; 0x02
    20e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e8:	8e 01       	movw	r16, r28
    20ea:	03 5b       	subi	r16, 0xB3	; 179
    20ec:	1f 4f       	sbci	r17, 0xFF	; 255
    20ee:	fe 01       	movw	r30, r28
    20f0:	ef 5a       	subi	r30, 0xAF	; 175
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	60 81       	ld	r22, Z
    20f6:	71 81       	ldd	r23, Z+1	; 0x01
    20f8:	82 81       	ldd	r24, Z+2	; 0x02
    20fa:	93 81       	ldd	r25, Z+3	; 0x03
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	4a e7       	ldi	r20, 0x7A	; 122
    2102:	53 e4       	ldi	r21, 0x43	; 67
    2104:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	f8 01       	movw	r30, r16
    210e:	80 83       	st	Z, r24
    2110:	91 83       	std	Z+1, r25	; 0x01
    2112:	a2 83       	std	Z+2, r26	; 0x02
    2114:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2116:	fe 01       	movw	r30, r28
    2118:	e3 5b       	subi	r30, 0xB3	; 179
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	60 81       	ld	r22, Z
    211e:	71 81       	ldd	r23, Z+1	; 0x01
    2120:	82 81       	ldd	r24, Z+2	; 0x02
    2122:	93 81       	ldd	r25, Z+3	; 0x03
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e8       	ldi	r20, 0x80	; 128
    212a:	5f e3       	ldi	r21, 0x3F	; 63
    212c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2130:	88 23       	and	r24, r24
    2132:	44 f4       	brge	.+16     	; 0x2144 <LCD_displayCharacter+0x220>
		__ticks = 1;
    2134:	fe 01       	movw	r30, r28
    2136:	e5 5b       	subi	r30, 0xB5	; 181
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	91 83       	std	Z+1, r25	; 0x01
    2140:	80 83       	st	Z, r24
    2142:	64 c0       	rjmp	.+200    	; 0x220c <LCD_displayCharacter+0x2e8>
	else if (__tmp > 65535)
    2144:	fe 01       	movw	r30, r28
    2146:	e3 5b       	subi	r30, 0xB3	; 179
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	60 81       	ld	r22, Z
    214c:	71 81       	ldd	r23, Z+1	; 0x01
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	57 e4       	ldi	r21, 0x47	; 71
    215a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	0c f0       	brlt	.+2      	; 0x2164 <LCD_displayCharacter+0x240>
    2162:	43 c0       	rjmp	.+134    	; 0x21ea <LCD_displayCharacter+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2164:	fe 01       	movw	r30, r28
    2166:	ef 5a       	subi	r30, 0xAF	; 175
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	60 81       	ld	r22, Z
    216c:	71 81       	ldd	r23, Z+1	; 0x01
    216e:	82 81       	ldd	r24, Z+2	; 0x02
    2170:	93 81       	ldd	r25, Z+3	; 0x03
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e2       	ldi	r20, 0x20	; 32
    2178:	51 e4       	ldi	r21, 0x41	; 65
    217a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	8e 01       	movw	r16, r28
    2184:	05 5b       	subi	r16, 0xB5	; 181
    2186:	1f 4f       	sbci	r17, 0xFF	; 255
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	f8 01       	movw	r30, r16
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	80 83       	st	Z, r24
    219a:	1f c0       	rjmp	.+62     	; 0x21da <LCD_displayCharacter+0x2b6>
    219c:	fe 01       	movw	r30, r28
    219e:	e7 5b       	subi	r30, 0xB7	; 183
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	89 e1       	ldi	r24, 0x19	; 25
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	80 83       	st	Z, r24
    21aa:	fe 01       	movw	r30, r28
    21ac:	e7 5b       	subi	r30, 0xB7	; 183
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	80 81       	ld	r24, Z
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_displayCharacter+0x290>
    21b8:	fe 01       	movw	r30, r28
    21ba:	e7 5b       	subi	r30, 0xB7	; 183
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	91 83       	std	Z+1, r25	; 0x01
    21c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c2:	de 01       	movw	r26, r28
    21c4:	a5 5b       	subi	r26, 0xB5	; 181
    21c6:	bf 4f       	sbci	r27, 0xFF	; 255
    21c8:	fe 01       	movw	r30, r28
    21ca:	e5 5b       	subi	r30, 0xB5	; 181
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	80 81       	ld	r24, Z
    21d0:	91 81       	ldd	r25, Z+1	; 0x01
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	11 96       	adiw	r26, 0x01	; 1
    21d6:	9c 93       	st	X, r25
    21d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21da:	fe 01       	movw	r30, r28
    21dc:	e5 5b       	subi	r30, 0xB5	; 181
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	80 81       	ld	r24, Z
    21e2:	91 81       	ldd	r25, Z+1	; 0x01
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	d1 f6       	brne	.-76     	; 0x219c <LCD_displayCharacter+0x278>
    21e8:	27 c0       	rjmp	.+78     	; 0x2238 <LCD_displayCharacter+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	8e 01       	movw	r16, r28
    21ec:	05 5b       	subi	r16, 0xB5	; 181
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	fe 01       	movw	r30, r28
    21f2:	e3 5b       	subi	r30, 0xB3	; 179
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	60 81       	ld	r22, Z
    21f8:	71 81       	ldd	r23, Z+1	; 0x01
    21fa:	82 81       	ldd	r24, Z+2	; 0x02
    21fc:	93 81       	ldd	r25, Z+3	; 0x03
    21fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	f8 01       	movw	r30, r16
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	80 83       	st	Z, r24
    220c:	de 01       	movw	r26, r28
    220e:	a9 5b       	subi	r26, 0xB9	; 185
    2210:	bf 4f       	sbci	r27, 0xFF	; 255
    2212:	fe 01       	movw	r30, r28
    2214:	e5 5b       	subi	r30, 0xB5	; 181
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	80 81       	ld	r24, Z
    221a:	91 81       	ldd	r25, Z+1	; 0x01
    221c:	8d 93       	st	X+, r24
    221e:	9c 93       	st	X, r25
    2220:	fe 01       	movw	r30, r28
    2222:	e9 5b       	subi	r30, 0xB9	; 185
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	80 81       	ld	r24, Z
    2228:	91 81       	ldd	r25, Z+1	; 0x01
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	f1 f7       	brne	.-4      	; 0x222a <LCD_displayCharacter+0x306>
    222e:	fe 01       	movw	r30, r28
    2230:	e9 5b       	subi	r30, 0xB9	; 185
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	91 83       	std	Z+1, r25	; 0x01
    2236:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2238:	82 e0       	ldi	r24, 0x02	; 2
    223a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <GPIO_readPort>
    223e:	fe 01       	movw	r30, r28
    2240:	ed 59       	subi	r30, 0x9D	; 157
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (data & 0xF0);
    2246:	fe 01       	movw	r30, r28
    2248:	ed 59       	subi	r30, 0x9D	; 157
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	98 2f       	mov	r25, r24
    2250:	9f 70       	andi	r25, 0x0F	; 15
    2252:	fe 01       	movw	r30, r28
    2254:	ec 59       	subi	r30, 0x9C	; 156
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	80 81       	ld	r24, Z
    225a:	80 7f       	andi	r24, 0xF0	; 240
    225c:	89 2b       	or	r24, r25
    225e:	fe 01       	movw	r30, r28
    2260:	ed 59       	subi	r30, 0x9D	; 157
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((data & 0xF0) >> 4);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2266:	fe 01       	movw	r30, r28
    2268:	ed 59       	subi	r30, 0x9D	; 157
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	82 e0       	ldi	r24, 0x02	; 2
    226e:	60 81       	ld	r22, Z
    2270:	0e 94 9e 0a 	call	0x153c	; 0x153c <GPIO_writePort>
    2274:	fe 01       	movw	r30, r28
    2276:	ed 5b       	subi	r30, 0xBD	; 189
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	a0 e8       	ldi	r26, 0x80	; 128
    2280:	bf e3       	ldi	r27, 0x3F	; 63
    2282:	80 83       	st	Z, r24
    2284:	91 83       	std	Z+1, r25	; 0x01
    2286:	a2 83       	std	Z+2, r26	; 0x02
    2288:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228a:	8e 01       	movw	r16, r28
    228c:	01 5c       	subi	r16, 0xC1	; 193
    228e:	1f 4f       	sbci	r17, 0xFF	; 255
    2290:	fe 01       	movw	r30, r28
    2292:	ed 5b       	subi	r30, 0xBD	; 189
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	60 81       	ld	r22, Z
    2298:	71 81       	ldd	r23, Z+1	; 0x01
    229a:	82 81       	ldd	r24, Z+2	; 0x02
    229c:	93 81       	ldd	r25, Z+3	; 0x03
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	4a e7       	ldi	r20, 0x7A	; 122
    22a4:	53 e4       	ldi	r21, 0x43	; 67
    22a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	f8 01       	movw	r30, r16
    22b0:	80 83       	st	Z, r24
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	a2 83       	std	Z+2, r26	; 0x02
    22b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b8:	fe 01       	movw	r30, r28
    22ba:	ff 96       	adiw	r30, 0x3f	; 63
    22bc:	60 81       	ld	r22, Z
    22be:	71 81       	ldd	r23, Z+1	; 0x01
    22c0:	82 81       	ldd	r24, Z+2	; 0x02
    22c2:	93 81       	ldd	r25, Z+3	; 0x03
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <LCD_displayCharacter+0x3ba>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9e af       	std	Y+62, r25	; 0x3e
    22da:	8d af       	std	Y+61, r24	; 0x3d
    22dc:	46 c0       	rjmp	.+140    	; 0x236a <LCD_displayCharacter+0x446>
	else if (__tmp > 65535)
    22de:	fe 01       	movw	r30, r28
    22e0:	ff 96       	adiw	r30, 0x3f	; 63
    22e2:	60 81       	ld	r22, Z
    22e4:	71 81       	ldd	r23, Z+1	; 0x01
    22e6:	82 81       	ldd	r24, Z+2	; 0x02
    22e8:	93 81       	ldd	r25, Z+3	; 0x03
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	3f ef       	ldi	r19, 0xFF	; 255
    22ee:	4f e7       	ldi	r20, 0x7F	; 127
    22f0:	57 e4       	ldi	r21, 0x47	; 71
    22f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22f6:	18 16       	cp	r1, r24
    22f8:	64 f5       	brge	.+88     	; 0x2352 <LCD_displayCharacter+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fa:	fe 01       	movw	r30, r28
    22fc:	ed 5b       	subi	r30, 0xBD	; 189
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	60 81       	ld	r22, Z
    2302:	71 81       	ldd	r23, Z+1	; 0x01
    2304:	82 81       	ldd	r24, Z+2	; 0x02
    2306:	93 81       	ldd	r25, Z+3	; 0x03
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e2       	ldi	r20, 0x20	; 32
    230e:	51 e4       	ldi	r21, 0x41	; 65
    2310:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	bc 01       	movw	r22, r24
    231a:	cd 01       	movw	r24, r26
    231c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	9e af       	std	Y+62, r25	; 0x3e
    2326:	8d af       	std	Y+61, r24	; 0x3d
    2328:	0f c0       	rjmp	.+30     	; 0x2348 <LCD_displayCharacter+0x424>
    232a:	89 e1       	ldi	r24, 0x19	; 25
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	9c af       	std	Y+60, r25	; 0x3c
    2330:	8b af       	std	Y+59, r24	; 0x3b
    2332:	8b ad       	ldd	r24, Y+59	; 0x3b
    2334:	9c ad       	ldd	r25, Y+60	; 0x3c
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <LCD_displayCharacter+0x412>
    233a:	9c af       	std	Y+60, r25	; 0x3c
    233c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2340:	9e ad       	ldd	r25, Y+62	; 0x3e
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	9e af       	std	Y+62, r25	; 0x3e
    2346:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2348:	8d ad       	ldd	r24, Y+61	; 0x3d
    234a:	9e ad       	ldd	r25, Y+62	; 0x3e
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	69 f7       	brne	.-38     	; 0x232a <LCD_displayCharacter+0x406>
    2350:	16 c0       	rjmp	.+44     	; 0x237e <LCD_displayCharacter+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2352:	fe 01       	movw	r30, r28
    2354:	ff 96       	adiw	r30, 0x3f	; 63
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	82 81       	ldd	r24, Z+2	; 0x02
    235c:	93 81       	ldd	r25, Z+3	; 0x03
    235e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	9e af       	std	Y+62, r25	; 0x3e
    2368:	8d af       	std	Y+61, r24	; 0x3d
    236a:	8d ad       	ldd	r24, Y+61	; 0x3d
    236c:	9e ad       	ldd	r25, Y+62	; 0x3e
    236e:	9a af       	std	Y+58, r25	; 0x3a
    2370:	89 af       	std	Y+57, r24	; 0x39
    2372:	89 ad       	ldd	r24, Y+57	; 0x39
    2374:	9a ad       	ldd	r25, Y+58	; 0x3a
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <LCD_displayCharacter+0x452>
    237a:	9a af       	std	Y+58, r25	; 0x3a
    237c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    237e:	83 e0       	ldi	r24, 0x03	; 3
    2380:	67 e0       	ldi	r22, 0x07	; 7
    2382:	40 e0       	ldi	r20, 0x00	; 0
    2384:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	a0 e8       	ldi	r26, 0x80	; 128
    238e:	bf e3       	ldi	r27, 0x3F	; 63
    2390:	8d ab       	std	Y+53, r24	; 0x35
    2392:	9e ab       	std	Y+54, r25	; 0x36
    2394:	af ab       	std	Y+55, r26	; 0x37
    2396:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2398:	6d a9       	ldd	r22, Y+53	; 0x35
    239a:	7e a9       	ldd	r23, Y+54	; 0x36
    239c:	8f a9       	ldd	r24, Y+55	; 0x37
    239e:	98 ad       	ldd	r25, Y+56	; 0x38
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	4a e7       	ldi	r20, 0x7A	; 122
    23a6:	53 e4       	ldi	r21, 0x43	; 67
    23a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	89 ab       	std	Y+49, r24	; 0x31
    23b2:	9a ab       	std	Y+50, r25	; 0x32
    23b4:	ab ab       	std	Y+51, r26	; 0x33
    23b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23b8:	69 a9       	ldd	r22, Y+49	; 0x31
    23ba:	7a a9       	ldd	r23, Y+50	; 0x32
    23bc:	8b a9       	ldd	r24, Y+51	; 0x33
    23be:	9c a9       	ldd	r25, Y+52	; 0x34
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e8       	ldi	r20, 0x80	; 128
    23c6:	5f e3       	ldi	r21, 0x3F	; 63
    23c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23cc:	88 23       	and	r24, r24
    23ce:	2c f4       	brge	.+10     	; 0x23da <LCD_displayCharacter+0x4b6>
		__ticks = 1;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	98 ab       	std	Y+48, r25	; 0x30
    23d6:	8f a7       	std	Y+47, r24	; 0x2f
    23d8:	3f c0       	rjmp	.+126    	; 0x2458 <LCD_displayCharacter+0x534>
	else if (__tmp > 65535)
    23da:	69 a9       	ldd	r22, Y+49	; 0x31
    23dc:	7a a9       	ldd	r23, Y+50	; 0x32
    23de:	8b a9       	ldd	r24, Y+51	; 0x33
    23e0:	9c a9       	ldd	r25, Y+52	; 0x34
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	3f ef       	ldi	r19, 0xFF	; 255
    23e6:	4f e7       	ldi	r20, 0x7F	; 127
    23e8:	57 e4       	ldi	r21, 0x47	; 71
    23ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23ee:	18 16       	cp	r1, r24
    23f0:	4c f5       	brge	.+82     	; 0x2444 <LCD_displayCharacter+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f2:	6d a9       	ldd	r22, Y+53	; 0x35
    23f4:	7e a9       	ldd	r23, Y+54	; 0x36
    23f6:	8f a9       	ldd	r24, Y+55	; 0x37
    23f8:	98 ad       	ldd	r25, Y+56	; 0x38
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e2       	ldi	r20, 0x20	; 32
    2400:	51 e4       	ldi	r21, 0x41	; 65
    2402:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	98 ab       	std	Y+48, r25	; 0x30
    2418:	8f a7       	std	Y+47, r24	; 0x2f
    241a:	0f c0       	rjmp	.+30     	; 0x243a <LCD_displayCharacter+0x516>
    241c:	89 e1       	ldi	r24, 0x19	; 25
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	9e a7       	std	Y+46, r25	; 0x2e
    2422:	8d a7       	std	Y+45, r24	; 0x2d
    2424:	8d a5       	ldd	r24, Y+45	; 0x2d
    2426:	9e a5       	ldd	r25, Y+46	; 0x2e
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <LCD_displayCharacter+0x504>
    242c:	9e a7       	std	Y+46, r25	; 0x2e
    242e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2430:	8f a5       	ldd	r24, Y+47	; 0x2f
    2432:	98 a9       	ldd	r25, Y+48	; 0x30
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	98 ab       	std	Y+48, r25	; 0x30
    2438:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243a:	8f a5       	ldd	r24, Y+47	; 0x2f
    243c:	98 a9       	ldd	r25, Y+48	; 0x30
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	69 f7       	brne	.-38     	; 0x241c <LCD_displayCharacter+0x4f8>
    2442:	14 c0       	rjmp	.+40     	; 0x246c <LCD_displayCharacter+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2444:	69 a9       	ldd	r22, Y+49	; 0x31
    2446:	7a a9       	ldd	r23, Y+50	; 0x32
    2448:	8b a9       	ldd	r24, Y+51	; 0x33
    244a:	9c a9       	ldd	r25, Y+52	; 0x34
    244c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	98 ab       	std	Y+48, r25	; 0x30
    2456:	8f a7       	std	Y+47, r24	; 0x2f
    2458:	8f a5       	ldd	r24, Y+47	; 0x2f
    245a:	98 a9       	ldd	r25, Y+48	; 0x30
    245c:	9c a7       	std	Y+44, r25	; 0x2c
    245e:	8b a7       	std	Y+43, r24	; 0x2b
    2460:	8b a5       	ldd	r24, Y+43	; 0x2b
    2462:	9c a5       	ldd	r25, Y+44	; 0x2c
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <LCD_displayCharacter+0x540>
    2468:	9c a7       	std	Y+44, r25	; 0x2c
    246a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    246c:	83 e0       	ldi	r24, 0x03	; 3
    246e:	67 e0       	ldi	r22, 0x07	; 7
    2470:	41 e0       	ldi	r20, 0x01	; 1
    2472:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	a0 e8       	ldi	r26, 0x80	; 128
    247c:	bf e3       	ldi	r27, 0x3F	; 63
    247e:	8f a3       	std	Y+39, r24	; 0x27
    2480:	98 a7       	std	Y+40, r25	; 0x28
    2482:	a9 a7       	std	Y+41, r26	; 0x29
    2484:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2486:	6f a1       	ldd	r22, Y+39	; 0x27
    2488:	78 a5       	ldd	r23, Y+40	; 0x28
    248a:	89 a5       	ldd	r24, Y+41	; 0x29
    248c:	9a a5       	ldd	r25, Y+42	; 0x2a
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	4a e7       	ldi	r20, 0x7A	; 122
    2494:	53 e4       	ldi	r21, 0x43	; 67
    2496:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	8b a3       	std	Y+35, r24	; 0x23
    24a0:	9c a3       	std	Y+36, r25	; 0x24
    24a2:	ad a3       	std	Y+37, r26	; 0x25
    24a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24a6:	6b a1       	ldd	r22, Y+35	; 0x23
    24a8:	7c a1       	ldd	r23, Y+36	; 0x24
    24aa:	8d a1       	ldd	r24, Y+37	; 0x25
    24ac:	9e a1       	ldd	r25, Y+38	; 0x26
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e8       	ldi	r20, 0x80	; 128
    24b4:	5f e3       	ldi	r21, 0x3F	; 63
    24b6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24ba:	88 23       	and	r24, r24
    24bc:	2c f4       	brge	.+10     	; 0x24c8 <LCD_displayCharacter+0x5a4>
		__ticks = 1;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	9a a3       	std	Y+34, r25	; 0x22
    24c4:	89 a3       	std	Y+33, r24	; 0x21
    24c6:	3f c0       	rjmp	.+126    	; 0x2546 <LCD_displayCharacter+0x622>
	else if (__tmp > 65535)
    24c8:	6b a1       	ldd	r22, Y+35	; 0x23
    24ca:	7c a1       	ldd	r23, Y+36	; 0x24
    24cc:	8d a1       	ldd	r24, Y+37	; 0x25
    24ce:	9e a1       	ldd	r25, Y+38	; 0x26
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	3f ef       	ldi	r19, 0xFF	; 255
    24d4:	4f e7       	ldi	r20, 0x7F	; 127
    24d6:	57 e4       	ldi	r21, 0x47	; 71
    24d8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24dc:	18 16       	cp	r1, r24
    24de:	4c f5       	brge	.+82     	; 0x2532 <LCD_displayCharacter+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e0:	6f a1       	ldd	r22, Y+39	; 0x27
    24e2:	78 a5       	ldd	r23, Y+40	; 0x28
    24e4:	89 a5       	ldd	r24, Y+41	; 0x29
    24e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e2       	ldi	r20, 0x20	; 32
    24ee:	51 e4       	ldi	r21, 0x41	; 65
    24f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9a a3       	std	Y+34, r25	; 0x22
    2506:	89 a3       	std	Y+33, r24	; 0x21
    2508:	0f c0       	rjmp	.+30     	; 0x2528 <LCD_displayCharacter+0x604>
    250a:	89 e1       	ldi	r24, 0x19	; 25
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	98 a3       	std	Y+32, r25	; 0x20
    2510:	8f 8f       	std	Y+31, r24	; 0x1f
    2512:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2514:	98 a1       	ldd	r25, Y+32	; 0x20
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <LCD_displayCharacter+0x5f2>
    251a:	98 a3       	std	Y+32, r25	; 0x20
    251c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251e:	89 a1       	ldd	r24, Y+33	; 0x21
    2520:	9a a1       	ldd	r25, Y+34	; 0x22
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	9a a3       	std	Y+34, r25	; 0x22
    2526:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2528:	89 a1       	ldd	r24, Y+33	; 0x21
    252a:	9a a1       	ldd	r25, Y+34	; 0x22
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	69 f7       	brne	.-38     	; 0x250a <LCD_displayCharacter+0x5e6>
    2530:	14 c0       	rjmp	.+40     	; 0x255a <LCD_displayCharacter+0x636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2532:	6b a1       	ldd	r22, Y+35	; 0x23
    2534:	7c a1       	ldd	r23, Y+36	; 0x24
    2536:	8d a1       	ldd	r24, Y+37	; 0x25
    2538:	9e a1       	ldd	r25, Y+38	; 0x26
    253a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	9a a3       	std	Y+34, r25	; 0x22
    2544:	89 a3       	std	Y+33, r24	; 0x21
    2546:	89 a1       	ldd	r24, Y+33	; 0x21
    2548:	9a a1       	ldd	r25, Y+34	; 0x22
    254a:	9e 8f       	std	Y+30, r25	; 0x1e
    254c:	8d 8f       	std	Y+29, r24	; 0x1d
    254e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2550:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <LCD_displayCharacter+0x62e>
    2556:	9e 8f       	std	Y+30, r25	; 0x1e
    2558:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    255a:	82 e0       	ldi	r24, 0x02	; 2
    255c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <GPIO_readPort>
    2560:	fe 01       	movw	r30, r28
    2562:	ed 59       	subi	r30, 0x9D	; 157
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((data & 0x0F) << 4);
    2568:	fe 01       	movw	r30, r28
    256a:	ed 59       	subi	r30, 0x9D	; 157
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 81       	ld	r24, Z
    2570:	28 2f       	mov	r18, r24
    2572:	2f 70       	andi	r18, 0x0F	; 15
    2574:	fe 01       	movw	r30, r28
    2576:	ec 59       	subi	r30, 0x9C	; 156
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	80 81       	ld	r24, Z
    257c:	88 2f       	mov	r24, r24
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	82 95       	swap	r24
    2582:	92 95       	swap	r25
    2584:	90 7f       	andi	r25, 0xF0	; 240
    2586:	98 27       	eor	r25, r24
    2588:	80 7f       	andi	r24, 0xF0	; 240
    258a:	98 27       	eor	r25, r24
    258c:	82 2b       	or	r24, r18
    258e:	fe 01       	movw	r30, r28
    2590:	ed 59       	subi	r30, 0x9D	; 157
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (data & 0x0F);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2596:	fe 01       	movw	r30, r28
    2598:	ed 59       	subi	r30, 0x9D	; 157
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	82 e0       	ldi	r24, 0x02	; 2
    259e:	60 81       	ld	r22, Z
    25a0:	0e 94 9e 0a 	call	0x153c	; 0x153c <GPIO_writePort>
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	a0 e8       	ldi	r26, 0x80	; 128
    25aa:	bf e3       	ldi	r27, 0x3F	; 63
    25ac:	89 8f       	std	Y+25, r24	; 0x19
    25ae:	9a 8f       	std	Y+26, r25	; 0x1a
    25b0:	ab 8f       	std	Y+27, r26	; 0x1b
    25b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b4:	69 8d       	ldd	r22, Y+25	; 0x19
    25b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	4a e7       	ldi	r20, 0x7A	; 122
    25c2:	53 e4       	ldi	r21, 0x43	; 67
    25c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	8d 8b       	std	Y+21, r24	; 0x15
    25ce:	9e 8b       	std	Y+22, r25	; 0x16
    25d0:	af 8b       	std	Y+23, r26	; 0x17
    25d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25d4:	6d 89       	ldd	r22, Y+21	; 0x15
    25d6:	7e 89       	ldd	r23, Y+22	; 0x16
    25d8:	8f 89       	ldd	r24, Y+23	; 0x17
    25da:	98 8d       	ldd	r25, Y+24	; 0x18
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e8       	ldi	r20, 0x80	; 128
    25e2:	5f e3       	ldi	r21, 0x3F	; 63
    25e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25e8:	88 23       	and	r24, r24
    25ea:	2c f4       	brge	.+10     	; 0x25f6 <LCD_displayCharacter+0x6d2>
		__ticks = 1;
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	9c 8b       	std	Y+20, r25	; 0x14
    25f2:	8b 8b       	std	Y+19, r24	; 0x13
    25f4:	3f c0       	rjmp	.+126    	; 0x2674 <LCD_displayCharacter+0x750>
	else if (__tmp > 65535)
    25f6:	6d 89       	ldd	r22, Y+21	; 0x15
    25f8:	7e 89       	ldd	r23, Y+22	; 0x16
    25fa:	8f 89       	ldd	r24, Y+23	; 0x17
    25fc:	98 8d       	ldd	r25, Y+24	; 0x18
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	3f ef       	ldi	r19, 0xFF	; 255
    2602:	4f e7       	ldi	r20, 0x7F	; 127
    2604:	57 e4       	ldi	r21, 0x47	; 71
    2606:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    260a:	18 16       	cp	r1, r24
    260c:	4c f5       	brge	.+82     	; 0x2660 <LCD_displayCharacter+0x73c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260e:	69 8d       	ldd	r22, Y+25	; 0x19
    2610:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e2       	ldi	r20, 0x20	; 32
    261c:	51 e4       	ldi	r21, 0x41	; 65
    261e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	bc 01       	movw	r22, r24
    2628:	cd 01       	movw	r24, r26
    262a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	9c 8b       	std	Y+20, r25	; 0x14
    2634:	8b 8b       	std	Y+19, r24	; 0x13
    2636:	0f c0       	rjmp	.+30     	; 0x2656 <LCD_displayCharacter+0x732>
    2638:	89 e1       	ldi	r24, 0x19	; 25
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	9a 8b       	std	Y+18, r25	; 0x12
    263e:	89 8b       	std	Y+17, r24	; 0x11
    2640:	89 89       	ldd	r24, Y+17	; 0x11
    2642:	9a 89       	ldd	r25, Y+18	; 0x12
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	f1 f7       	brne	.-4      	; 0x2644 <LCD_displayCharacter+0x720>
    2648:	9a 8b       	std	Y+18, r25	; 0x12
    264a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264c:	8b 89       	ldd	r24, Y+19	; 0x13
    264e:	9c 89       	ldd	r25, Y+20	; 0x14
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	9c 8b       	std	Y+20, r25	; 0x14
    2654:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2656:	8b 89       	ldd	r24, Y+19	; 0x13
    2658:	9c 89       	ldd	r25, Y+20	; 0x14
    265a:	00 97       	sbiw	r24, 0x00	; 0
    265c:	69 f7       	brne	.-38     	; 0x2638 <LCD_displayCharacter+0x714>
    265e:	14 c0       	rjmp	.+40     	; 0x2688 <LCD_displayCharacter+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2660:	6d 89       	ldd	r22, Y+21	; 0x15
    2662:	7e 89       	ldd	r23, Y+22	; 0x16
    2664:	8f 89       	ldd	r24, Y+23	; 0x17
    2666:	98 8d       	ldd	r25, Y+24	; 0x18
    2668:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	9c 8b       	std	Y+20, r25	; 0x14
    2672:	8b 8b       	std	Y+19, r24	; 0x13
    2674:	8b 89       	ldd	r24, Y+19	; 0x13
    2676:	9c 89       	ldd	r25, Y+20	; 0x14
    2678:	98 8b       	std	Y+16, r25	; 0x10
    267a:	8f 87       	std	Y+15, r24	; 0x0f
    267c:	8f 85       	ldd	r24, Y+15	; 0x0f
    267e:	98 89       	ldd	r25, Y+16	; 0x10
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	f1 f7       	brne	.-4      	; 0x2680 <LCD_displayCharacter+0x75c>
    2684:	98 8b       	std	Y+16, r25	; 0x10
    2686:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2688:	83 e0       	ldi	r24, 0x03	; 3
    268a:	67 e0       	ldi	r22, 0x07	; 7
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	a0 e8       	ldi	r26, 0x80	; 128
    2698:	bf e3       	ldi	r27, 0x3F	; 63
    269a:	8b 87       	std	Y+11, r24	; 0x0b
    269c:	9c 87       	std	Y+12, r25	; 0x0c
    269e:	ad 87       	std	Y+13, r26	; 0x0d
    26a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	4a e7       	ldi	r20, 0x7A	; 122
    26b0:	53 e4       	ldi	r21, 0x43	; 67
    26b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	8f 83       	std	Y+7, r24	; 0x07
    26bc:	98 87       	std	Y+8, r25	; 0x08
    26be:	a9 87       	std	Y+9, r26	; 0x09
    26c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26c2:	6f 81       	ldd	r22, Y+7	; 0x07
    26c4:	78 85       	ldd	r23, Y+8	; 0x08
    26c6:	89 85       	ldd	r24, Y+9	; 0x09
    26c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e8       	ldi	r20, 0x80	; 128
    26d0:	5f e3       	ldi	r21, 0x3F	; 63
    26d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26d6:	88 23       	and	r24, r24
    26d8:	2c f4       	brge	.+10     	; 0x26e4 <LCD_displayCharacter+0x7c0>
		__ticks = 1;
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
    26e2:	3f c0       	rjmp	.+126    	; 0x2762 <LCD_displayCharacter+0x83e>
	else if (__tmp > 65535)
    26e4:	6f 81       	ldd	r22, Y+7	; 0x07
    26e6:	78 85       	ldd	r23, Y+8	; 0x08
    26e8:	89 85       	ldd	r24, Y+9	; 0x09
    26ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	3f ef       	ldi	r19, 0xFF	; 255
    26f0:	4f e7       	ldi	r20, 0x7F	; 127
    26f2:	57 e4       	ldi	r21, 0x47	; 71
    26f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26f8:	18 16       	cp	r1, r24
    26fa:	4c f5       	brge	.+82     	; 0x274e <LCD_displayCharacter+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2700:	8d 85       	ldd	r24, Y+13	; 0x0d
    2702:	9e 85       	ldd	r25, Y+14	; 0x0e
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e2       	ldi	r20, 0x20	; 32
    270a:	51 e4       	ldi	r21, 0x41	; 65
    270c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	bc 01       	movw	r22, r24
    2716:	cd 01       	movw	r24, r26
    2718:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	9e 83       	std	Y+6, r25	; 0x06
    2722:	8d 83       	std	Y+5, r24	; 0x05
    2724:	0f c0       	rjmp	.+30     	; 0x2744 <LCD_displayCharacter+0x820>
    2726:	89 e1       	ldi	r24, 0x19	; 25
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	9c 83       	std	Y+4, r25	; 0x04
    272c:	8b 83       	std	Y+3, r24	; 0x03
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	9c 81       	ldd	r25, Y+4	; 0x04
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	f1 f7       	brne	.-4      	; 0x2732 <LCD_displayCharacter+0x80e>
    2736:	9c 83       	std	Y+4, r25	; 0x04
    2738:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273a:	8d 81       	ldd	r24, Y+5	; 0x05
    273c:	9e 81       	ldd	r25, Y+6	; 0x06
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	9e 83       	std	Y+6, r25	; 0x06
    2742:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2744:	8d 81       	ldd	r24, Y+5	; 0x05
    2746:	9e 81       	ldd	r25, Y+6	; 0x06
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	69 f7       	brne	.-38     	; 0x2726 <LCD_displayCharacter+0x802>
    274c:	14 c0       	rjmp	.+40     	; 0x2776 <LCD_displayCharacter+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274e:	6f 81       	ldd	r22, Y+7	; 0x07
    2750:	78 85       	ldd	r23, Y+8	; 0x08
    2752:	89 85       	ldd	r24, Y+9	; 0x09
    2754:	9a 85       	ldd	r25, Y+10	; 0x0a
    2756:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
    2762:	8d 81       	ldd	r24, Y+5	; 0x05
    2764:	9e 81       	ldd	r25, Y+6	; 0x06
    2766:	9a 83       	std	Y+2, r25	; 0x02
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	9a 81       	ldd	r25, Y+2	; 0x02
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	f1 f7       	brne	.-4      	; 0x276e <LCD_displayCharacter+0x84a>
    2772:	9a 83       	std	Y+2, r25	; 0x02
    2774:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2776:	cc 59       	subi	r28, 0x9C	; 156
    2778:	df 4f       	sbci	r29, 0xFF	; 255
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	1f 91       	pop	r17
    278a:	0f 91       	pop	r16
    278c:	08 95       	ret

0000278e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	00 d0       	rcall	.+0      	; 0x2794 <LCD_displayString+0x6>
    2794:	0f 92       	push	r0
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	9b 83       	std	Y+3, r25	; 0x03
    279c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    279e:	19 82       	std	Y+1, r1	; 0x01
    27a0:	0e c0       	rjmp	.+28     	; 0x27be <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	28 2f       	mov	r18, r24
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	9b 81       	ldd	r25, Y+3	; 0x03
    27ac:	fc 01       	movw	r30, r24
    27ae:	e2 0f       	add	r30, r18
    27b0:	f3 1f       	adc	r31, r19
    27b2:	80 81       	ld	r24, Z
    27b4:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <LCD_displayCharacter>
		i++;
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	8f 5f       	subi	r24, 0xFF	; 255
    27bc:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	28 2f       	mov	r18, r24
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	9b 81       	ldd	r25, Y+3	; 0x03
    27c8:	fc 01       	movw	r30, r24
    27ca:	e2 0f       	add	r30, r18
    27cc:	f3 1f       	adc	r31, r19
    27ce:	80 81       	ld	r24, Z
    27d0:	88 23       	and	r24, r24
    27d2:	39 f7       	brne	.-50     	; 0x27a2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <LCD_moveCursor+0x6>
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <LCD_moveCursor+0x8>
    27e8:	0f 92       	push	r0
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	8a 83       	std	Y+2, r24	; 0x02
    27f0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	3d 83       	std	Y+5, r19	; 0x05
    27fa:	2c 83       	std	Y+4, r18	; 0x04
    27fc:	8c 81       	ldd	r24, Y+4	; 0x04
    27fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2800:	81 30       	cpi	r24, 0x01	; 1
    2802:	91 05       	cpc	r25, r1
    2804:	c1 f0       	breq	.+48     	; 0x2836 <LCD_moveCursor+0x56>
    2806:	2c 81       	ldd	r18, Y+4	; 0x04
    2808:	3d 81       	ldd	r19, Y+5	; 0x05
    280a:	22 30       	cpi	r18, 0x02	; 2
    280c:	31 05       	cpc	r19, r1
    280e:	2c f4       	brge	.+10     	; 0x281a <LCD_moveCursor+0x3a>
    2810:	8c 81       	ldd	r24, Y+4	; 0x04
    2812:	9d 81       	ldd	r25, Y+5	; 0x05
    2814:	00 97       	sbiw	r24, 0x00	; 0
    2816:	61 f0       	breq	.+24     	; 0x2830 <LCD_moveCursor+0x50>
    2818:	19 c0       	rjmp	.+50     	; 0x284c <LCD_moveCursor+0x6c>
    281a:	2c 81       	ldd	r18, Y+4	; 0x04
    281c:	3d 81       	ldd	r19, Y+5	; 0x05
    281e:	22 30       	cpi	r18, 0x02	; 2
    2820:	31 05       	cpc	r19, r1
    2822:	69 f0       	breq	.+26     	; 0x283e <LCD_moveCursor+0x5e>
    2824:	8c 81       	ldd	r24, Y+4	; 0x04
    2826:	9d 81       	ldd	r25, Y+5	; 0x05
    2828:	83 30       	cpi	r24, 0x03	; 3
    282a:	91 05       	cpc	r25, r1
    282c:	61 f0       	breq	.+24     	; 0x2846 <LCD_moveCursor+0x66>
    282e:	0e c0       	rjmp	.+28     	; 0x284c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	89 83       	std	Y+1, r24	; 0x01
    2834:	0b c0       	rjmp	.+22     	; 0x284c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2836:	8b 81       	ldd	r24, Y+3	; 0x03
    2838:	80 5c       	subi	r24, 0xC0	; 192
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	07 c0       	rjmp	.+14     	; 0x284c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	80 5f       	subi	r24, 0xF0	; 240
    2842:	89 83       	std	Y+1, r24	; 0x01
    2844:	03 c0       	rjmp	.+6      	; 0x284c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	80 5b       	subi	r24, 0xB0	; 176
    284a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	80 68       	ori	r24, 0x80	; 128
    2850:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_sendCommand>
}
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	cf 91       	pop	r28
    2860:	df 91       	pop	r29
    2862:	08 95       	ret

00002864 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	00 d0       	rcall	.+0      	; 0x286a <LCD_displayStringRowColumn+0x6>
    286a:	00 d0       	rcall	.+0      	; 0x286c <LCD_displayStringRowColumn+0x8>
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	89 83       	std	Y+1, r24	; 0x01
    2872:	6a 83       	std	Y+2, r22	; 0x02
    2874:	5c 83       	std	Y+4, r21	; 0x04
    2876:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	6a 81       	ldd	r22, Y+2	; 0x02
    287c:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2880:	8b 81       	ldd	r24, Y+3	; 0x03
    2882:	9c 81       	ldd	r25, Y+4	; 0x04
    2884:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_displayString>
}
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	62 97       	sbiw	r28, 0x12	; 18
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	9a 8b       	std	Y+18, r25	; 0x12
    28ac:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    28ae:	89 89       	ldd	r24, Y+17	; 0x11
    28b0:	9a 89       	ldd	r25, Y+18	; 0x12
    28b2:	9e 01       	movw	r18, r28
    28b4:	2f 5f       	subi	r18, 0xFF	; 255
    28b6:	3f 4f       	sbci	r19, 0xFF	; 255
    28b8:	b9 01       	movw	r22, r18
    28ba:	4a e0       	ldi	r20, 0x0A	; 10
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	0e 94 13 17 	call	0x2e26	; 0x2e26 <itoa>
   LCD_displayString(buff); /* Display the string */
    28c2:	ce 01       	movw	r24, r28
    28c4:	01 96       	adiw	r24, 0x01	; 1
    28c6:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_displayString>
}
    28ca:	62 96       	adiw	r28, 0x12	; 18
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	cf 91       	pop	r28
    28d8:	df 91       	pop	r29
    28da:	08 95       	ret

000028dc <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    28dc:	df 93       	push	r29
    28de:	cf 93       	push	r28
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_sendCommand>
}
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	08 95       	ret

000028f0 <LM35_getTemp>:
/*
 * Description :
 * Calculate the temperature from the ADC digital value and return it to the user.
 */
uint8 LM35_getTemp(void)
{
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	61 97       	sbiw	r28, 0x11	; 17
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
	uint8 temp = 0;
    2904:	19 8a       	std	Y+17, r1	; 0x11

	uint16 adc = 0;
    2906:	18 8a       	std	Y+16, r1	; 0x10
    2908:	1f 86       	std	Y+15, r1	; 0x0f

	/* Read ADC channel where the temperature sensor is connected */

	adc = ADC_read(SENSOR_CHANNEL_ID);
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	0e 94 b2 07 	call	0xf64	; 0xf64 <ADC_read>
    2910:	98 8b       	std	Y+16, r25	; 0x10
    2912:	8f 87       	std	Y+15, r24	; 0x0f
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	a0 ea       	ldi	r26, 0xA0	; 160
    291a:	b0 e4       	ldi	r27, 0x40	; 64
    291c:	8b 87       	std	Y+11, r24	; 0x0b
    291e:	9c 87       	std	Y+12, r25	; 0x0c
    2920:	ad 87       	std	Y+13, r26	; 0x0d
    2922:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2924:	6b 85       	ldd	r22, Y+11	; 0x0b
    2926:	7c 85       	ldd	r23, Y+12	; 0x0c
    2928:	8d 85       	ldd	r24, Y+13	; 0x0d
    292a:	9e 85       	ldd	r25, Y+14	; 0x0e
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	4a e7       	ldi	r20, 0x7A	; 122
    2932:	53 e4       	ldi	r21, 0x43	; 67
    2934:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	8f 83       	std	Y+7, r24	; 0x07
    293e:	98 87       	std	Y+8, r25	; 0x08
    2940:	a9 87       	std	Y+9, r26	; 0x09
    2942:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2944:	6f 81       	ldd	r22, Y+7	; 0x07
    2946:	78 85       	ldd	r23, Y+8	; 0x08
    2948:	89 85       	ldd	r24, Y+9	; 0x09
    294a:	9a 85       	ldd	r25, Y+10	; 0x0a
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e8       	ldi	r20, 0x80	; 128
    2952:	5f e3       	ldi	r21, 0x3F	; 63
    2954:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2958:	88 23       	and	r24, r24
    295a:	2c f4       	brge	.+10     	; 0x2966 <LM35_getTemp+0x76>
		__ticks = 1;
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	9e 83       	std	Y+6, r25	; 0x06
    2962:	8d 83       	std	Y+5, r24	; 0x05
    2964:	3f c0       	rjmp	.+126    	; 0x29e4 <LM35_getTemp+0xf4>
	else if (__tmp > 65535)
    2966:	6f 81       	ldd	r22, Y+7	; 0x07
    2968:	78 85       	ldd	r23, Y+8	; 0x08
    296a:	89 85       	ldd	r24, Y+9	; 0x09
    296c:	9a 85       	ldd	r25, Y+10	; 0x0a
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	3f ef       	ldi	r19, 0xFF	; 255
    2972:	4f e7       	ldi	r20, 0x7F	; 127
    2974:	57 e4       	ldi	r21, 0x47	; 71
    2976:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    297a:	18 16       	cp	r1, r24
    297c:	4c f5       	brge	.+82     	; 0x29d0 <LM35_getTemp+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2980:	7c 85       	ldd	r23, Y+12	; 0x0c
    2982:	8d 85       	ldd	r24, Y+13	; 0x0d
    2984:	9e 85       	ldd	r25, Y+14	; 0x0e
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e2       	ldi	r20, 0x20	; 32
    298c:	51 e4       	ldi	r21, 0x41	; 65
    298e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	bc 01       	movw	r22, r24
    2998:	cd 01       	movw	r24, r26
    299a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	9e 83       	std	Y+6, r25	; 0x06
    29a4:	8d 83       	std	Y+5, r24	; 0x05
    29a6:	0f c0       	rjmp	.+30     	; 0x29c6 <LM35_getTemp+0xd6>
    29a8:	89 e1       	ldi	r24, 0x19	; 25
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	9c 83       	std	Y+4, r25	; 0x04
    29ae:	8b 83       	std	Y+3, r24	; 0x03
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	9c 81       	ldd	r25, Y+4	; 0x04
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LM35_getTemp+0xc4>
    29b8:	9c 83       	std	Y+4, r25	; 0x04
    29ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29bc:	8d 81       	ldd	r24, Y+5	; 0x05
    29be:	9e 81       	ldd	r25, Y+6	; 0x06
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c6:	8d 81       	ldd	r24, Y+5	; 0x05
    29c8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	69 f7       	brne	.-38     	; 0x29a8 <LM35_getTemp+0xb8>
    29ce:	14 c0       	rjmp	.+40     	; 0x29f8 <LM35_getTemp+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d0:	6f 81       	ldd	r22, Y+7	; 0x07
    29d2:	78 85       	ldd	r23, Y+8	; 0x08
    29d4:	89 85       	ldd	r24, Y+9	; 0x09
    29d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	9e 83       	std	Y+6, r25	; 0x06
    29e2:	8d 83       	std	Y+5, r24	; 0x05
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	9e 81       	ldd	r25, Y+6	; 0x06
    29e8:	9a 83       	std	Y+2, r25	; 0x02
    29ea:	89 83       	std	Y+1, r24	; 0x01
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	9a 81       	ldd	r25, Y+2	; 0x02
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <LM35_getTemp+0x100>
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	/* Calculate the temperature from the ADC value*/
	temp = (uint8)(((uint32)adc*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    29f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29fa:	98 89       	ldd	r25, Y+16	; 0x10
    29fc:	cc 01       	movw	r24, r24
    29fe:	a0 e0       	ldi	r26, 0x00	; 0
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	26 e9       	ldi	r18, 0x96	; 150
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e0       	ldi	r20, 0x00	; 0
    2a08:	50 e0       	ldi	r21, 0x00	; 0
    2a0a:	bc 01       	movw	r22, r24
    2a0c:	cd 01       	movw	r24, r26
    2a0e:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__mulsi3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	bc 01       	movw	r22, r24
    2a24:	cd 01       	movw	r24, r26
    2a26:	2a e0       	ldi	r18, 0x0A	; 10
    2a28:	37 ed       	ldi	r19, 0xD7	; 215
    2a2a:	43 e2       	ldi	r20, 0x23	; 35
    2a2c:	50 e4       	ldi	r21, 0x40	; 64
    2a2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	bc 01       	movw	r22, r24
    2a38:	cd 01       	movw	r24, r26
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	30 ed       	ldi	r19, 0xD0	; 208
    2a3e:	4f eb       	ldi	r20, 0xBF	; 191
    2a40:	54 e4       	ldi	r21, 0x44	; 68
    2a42:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	bc 01       	movw	r22, r24
    2a4c:	cd 01       	movw	r24, r26
    2a4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	89 8b       	std	Y+17, r24	; 0x11

	return temp;
    2a58:	89 89       	ldd	r24, Y+17	; 0x11
}
    2a5a:	61 96       	adiw	r28, 0x11	; 17
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	f8 94       	cli
    2a60:	de bf       	out	0x3e, r29	; 62
    2a62:	0f be       	out	0x3f, r0	; 63
    2a64:	cd bf       	out	0x3d, r28	; 61
    2a66:	cf 91       	pop	r28
    2a68:	df 91       	pop	r29
    2a6a:	08 95       	ret

00002a6c <main>:




void main()
{
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	61 97       	sbiw	r28, 0x11	; 17
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	de bf       	out	0x3e, r29	; 62
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	cd bf       	out	0x3d, r28	; 61
	// ADC For Temperature Sensor Configuration
	ADC_ConfigType ADC_Config = {INTERNAL_VOLTAGE, F_CPU_8};
    2a80:	83 e0       	ldi	r24, 0x03	; 3
    2a82:	88 8b       	std	Y+16, r24	; 0x10
    2a84:	83 e0       	ldi	r24, 0x03	; 3
    2a86:	89 8b       	std	Y+17, r24	; 0x11
	ADC_init (&ADC_Config);
    2a88:	ce 01       	movw	r24, r28
    2a8a:	40 96       	adiw	r24, 0x10	; 16
    2a8c:	0e 94 7c 07 	call	0xef8	; 0xef8 <ADC_init>

	//send the channel number in which LM35 is connected
	ADC_read(ADCchannel);
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	0e 94 b2 07 	call	0xf64	; 0xf64 <ADC_read>

	//LCD Initialization
	LCD_init();
    2a96:	0e 94 27 0b 	call	0x164e	; 0x164e <LCD_init>

	//DC motor Initialization
	DCmotor_init();
    2a9a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DCmotor_init>

	//LED initialization
	GPIO_setupPinDirection(LEDR_PORT,LEDR_PIN, PIN_OUTPUT);
    2a9e:	83 e0       	ldi	r24, 0x03	; 3
    2aa0:	64 e0       	ldi	r22, 0x04	; 4
    2aa2:	41 e0       	ldi	r20, 0x01	; 1
    2aa4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LEDY_PORT,LEDY_PIN, PIN_OUTPUT);
    2aa8:	83 e0       	ldi	r24, 0x03	; 3
    2aaa:	63 e0       	ldi	r22, 0x03	; 3
    2aac:	41 e0       	ldi	r20, 0x01	; 1
    2aae:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LEDG_PORT,LEDG_PIN, PIN_OUTPUT);
    2ab2:	83 e0       	ldi	r24, 0x03	; 3
    2ab4:	62 e0       	ldi	r22, 0x02	; 2
    2ab6:	41 e0       	ldi	r20, 0x01	; 1
    2ab8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_setupPinDirection>
	//Buzzer initialization
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN, PIN_OUTPUT);
    2abc:	83 e0       	ldi	r24, 0x03	; 3
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	41 e0       	ldi	r20, 0x01	; 1
    2ac2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_setupPinDirection>
	//Push button initialization
	GPIO_setupPinDirection(BUTTON_PORT,BUTTON_PIN, PIN_INPUT);
    2ac6:	83 e0       	ldi	r24, 0x03	; 3
    2ac8:	61 e0       	ldi	r22, 0x01	; 1
    2aca:	40 e0       	ldi	r20, 0x00	; 0
    2acc:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_setupPinDirection>

	/* Set the three bits to turn off the LEDs at the beginning */
	GPIO_writePin(LEDR_PORT,LEDR_PIN, LOGIC_HIGH);
    2ad0:	83 e0       	ldi	r24, 0x03	; 3
    2ad2:	64 e0       	ldi	r22, 0x04	; 4
    2ad4:	41 e0       	ldi	r20, 0x01	; 1
    2ad6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
	GPIO_writePin(LEDY_PORT,LEDY_PIN, LOGIC_HIGH);
    2ada:	83 e0       	ldi	r24, 0x03	; 3
    2adc:	63 e0       	ldi	r22, 0x03	; 3
    2ade:	41 e0       	ldi	r20, 0x01	; 1
    2ae0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
	GPIO_writePin(LEDG_PORT,LEDG_PIN, LOGIC_HIGH);
    2ae4:	83 e0       	ldi	r24, 0x03	; 3
    2ae6:	62 e0       	ldi	r22, 0x02	; 2
    2ae8:	41 e0       	ldi	r20, 0x01	; 1
    2aea:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
	//Set the buzzer to low value to be initially stopped
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_LOW);
    2aee:	83 e0       	ldi	r24, 0x03	; 3
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	40 e0       	ldi	r20, 0x00	; 0
    2af4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
	uint8 temp;

	while (1)
	{
		//store the current temperature in the variabel
		temp = LM35_getTemp();
    2af8:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LM35_getTemp>
    2afc:	8f 87       	std	Y+15, r24	; 0x0f

		//start to print the titles
		LCD_moveCursor(0,0);
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	60 e0       	ldi	r22, 0x00	; 0
    2b02:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <LCD_moveCursor>
		LCD_displayString("Temp =      C");
    2b06:	80 e6       	ldi	r24, 0x60	; 96
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_displayString>

		//print the current temperature
		LCD_moveCursor(0,8);
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	68 e0       	ldi	r22, 0x08	; 8
    2b12:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <LCD_moveCursor>
		LCD_intgerToString(temp);
    2b16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b18:	88 2f       	mov	r24, r24
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_intgerToString>
//			 *in the system print error for the user */
//			LCD_moveCursor(1,0);
//			LCD_displayString("    ERROR   ");
//		}

		if ( temp < 20)
    2b20:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b22:	84 31       	cpi	r24, 0x14	; 20
    2b24:	c8 f4       	brcc	.+50     	; 0x2b58 <main+0xec>
		{
			/* if the temperature is below 20 the green led
			 * will lighten up and the motor and buzzer will be stop
			 * if they are running
			 */
			GPIO_writePin(LEDR_PORT,LEDR_PIN, LOGIC_HIGH);
    2b26:	83 e0       	ldi	r24, 0x03	; 3
    2b28:	64 e0       	ldi	r22, 0x04	; 4
    2b2a:	41 e0       	ldi	r20, 0x01	; 1
    2b2c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
			GPIO_writePin(LEDY_PORT,LEDY_PIN, LOGIC_HIGH);
    2b30:	83 e0       	ldi	r24, 0x03	; 3
    2b32:	63 e0       	ldi	r22, 0x03	; 3
    2b34:	41 e0       	ldi	r20, 0x01	; 1
    2b36:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
			GPIO_writePin(LEDG_PORT,LEDG_PIN, LOGIC_LOW);
    2b3a:	83 e0       	ldi	r24, 0x03	; 3
    2b3c:	62 e0       	ldi	r22, 0x02	; 2
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>

			GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_LOW);
    2b44:	83 e0       	ldi	r24, 0x03	; 3
    2b46:	60 e0       	ldi	r22, 0x00	; 0
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>

			DCmotor_info(STOP,'F');
    2b4e:	83 e1       	ldi	r24, 0x13	; 19
    2b50:	66 e4       	ldi	r22, 0x46	; 70
    2b52:	0e 94 2a 07 	call	0xe54	; 0xe54 <DCmotor_info>
    2b56:	d0 cf       	rjmp	.-96     	; 0x2af8 <main+0x8c>

		}
		else if ( temp < 40)
    2b58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b5a:	88 32       	cpi	r24, 0x28	; 40
    2b5c:	c8 f4       	brcc	.+50     	; 0x2b90 <main+0x124>
			 * with a speed depending on the temperature start from zero when
			 * temperature is equal to 19 and its speed increase 4.75% every
			 * degree till reaching 100% at temperature 40 and buzzer will be stop
			 * if it was running
			 */
			GPIO_writePin(LEDR_PORT,LEDR_PIN, LOGIC_HIGH);
    2b5e:	83 e0       	ldi	r24, 0x03	; 3
    2b60:	64 e0       	ldi	r22, 0x04	; 4
    2b62:	41 e0       	ldi	r20, 0x01	; 1
    2b64:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
			GPIO_writePin(LEDY_PORT,LEDY_PIN, LOGIC_LOW);
    2b68:	83 e0       	ldi	r24, 0x03	; 3
    2b6a:	63 e0       	ldi	r22, 0x03	; 3
    2b6c:	40 e0       	ldi	r20, 0x00	; 0
    2b6e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
			GPIO_writePin(LEDG_PORT,LEDG_PIN, LOGIC_HIGH);
    2b72:	83 e0       	ldi	r24, 0x03	; 3
    2b74:	62 e0       	ldi	r22, 0x02	; 2
    2b76:	41 e0       	ldi	r20, 0x01	; 1
    2b78:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>

			GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_LOW);
    2b7c:	83 e0       	ldi	r24, 0x03	; 3
    2b7e:	60 e0       	ldi	r22, 0x00	; 0
    2b80:	40 e0       	ldi	r20, 0x00	; 0
    2b82:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>

			/*send the current temperature and the set the motor
			to always rotate ACW (Forward) to push the air*/
			DCmotor_info(temp,'F');
    2b86:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b88:	66 e4       	ldi	r22, 0x46	; 70
    2b8a:	0e 94 2a 07 	call	0xe54	; 0xe54 <DCmotor_info>
    2b8e:	b4 cf       	rjmp	.-152    	; 0x2af8 <main+0x8c>
			 * and remain in the loop until both the push button is pressed and
			 * the temperature is below 40
			 */
			while(1)
			{
				temp = LM35_getTemp();
    2b90:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LM35_getTemp>
    2b94:	8f 87       	std	Y+15, r24	; 0x0f
				LCD_moveCursor(0,8);
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	68 e0       	ldi	r22, 0x08	; 8
    2b9a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <LCD_moveCursor>
				LCD_intgerToString(temp);
    2b9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba0:	88 2f       	mov	r24, r24
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_intgerToString>
				//print warning on the screen
				LCD_moveCursor(1,0);
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	60 e0       	ldi	r22, 0x00	; 0
    2bac:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <LCD_moveCursor>
				LCD_displayString("    WARNING!   ");
    2bb0:	8e e6       	ldi	r24, 0x6E	; 110
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_displayString>

				//activating the red led
				GPIO_writePin(LEDR_PORT,LEDR_PIN, LOGIC_LOW);
    2bb8:	83 e0       	ldi	r24, 0x03	; 3
    2bba:	64 e0       	ldi	r22, 0x04	; 4
    2bbc:	40 e0       	ldi	r20, 0x00	; 0
    2bbe:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
				GPIO_writePin(LEDY_PORT,LEDY_PIN, LOGIC_HIGH);
    2bc2:	83 e0       	ldi	r24, 0x03	; 3
    2bc4:	63 e0       	ldi	r22, 0x03	; 3
    2bc6:	41 e0       	ldi	r20, 0x01	; 1
    2bc8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
				GPIO_writePin(LEDG_PORT,LEDG_PIN, LOGIC_HIGH);
    2bcc:	83 e0       	ldi	r24, 0x03	; 3
    2bce:	62 e0       	ldi	r22, 0x02	; 2
    2bd0:	41 e0       	ldi	r20, 0x01	; 1
    2bd2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>
				//activating the buzzer
				GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_HIGH);
    2bd6:	83 e0       	ldi	r24, 0x03	; 3
    2bd8:	60 e0       	ldi	r22, 0x00	; 0
    2bda:	41 e0       	ldi	r20, 0x01	; 1
    2bdc:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_writePin>

				/*set the motor to rotate with maximum value and
				 *set the motor to always rotate ACW (Forward) to
				 *push the air*/
				DCmotor_info(MAX,'F');
    2be0:	88 e2       	ldi	r24, 0x28	; 40
    2be2:	66 e4       	ldi	r22, 0x46	; 70
    2be4:	0e 94 2a 07 	call	0xe54	; 0xe54 <DCmotor_info>

				//check if the button is pressed
				if(GPIO_readPin(BUTTON_PORT,BUTTON_PIN))
    2be8:	83 e0       	ldi	r24, 0x03	; 3
    2bea:	61 e0       	ldi	r22, 0x01	; 1
    2bec:	0e 94 bf 09 	call	0x137e	; 0x137e <GPIO_readPin>
    2bf0:	88 23       	and	r24, r24
    2bf2:	71 f2       	breq	.-100    	; 0x2b90 <main+0x124>
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	a0 ef       	ldi	r26, 0xF0	; 240
    2bfa:	b1 e4       	ldi	r27, 0x41	; 65
    2bfc:	8b 87       	std	Y+11, r24	; 0x0b
    2bfe:	9c 87       	std	Y+12, r25	; 0x0c
    2c00:	ad 87       	std	Y+13, r26	; 0x0d
    2c02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	4a e7       	ldi	r20, 0x7A	; 122
    2c12:	53 e4       	ldi	r21, 0x43	; 67
    2c14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	8f 83       	std	Y+7, r24	; 0x07
    2c1e:	98 87       	std	Y+8, r25	; 0x08
    2c20:	a9 87       	std	Y+9, r26	; 0x09
    2c22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c24:	6f 81       	ldd	r22, Y+7	; 0x07
    2c26:	78 85       	ldd	r23, Y+8	; 0x08
    2c28:	89 85       	ldd	r24, Y+9	; 0x09
    2c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e8       	ldi	r20, 0x80	; 128
    2c32:	5f e3       	ldi	r21, 0x3F	; 63
    2c34:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c38:	88 23       	and	r24, r24
    2c3a:	2c f4       	brge	.+10     	; 0x2c46 <main+0x1da>
		__ticks = 1;
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	9e 83       	std	Y+6, r25	; 0x06
    2c42:	8d 83       	std	Y+5, r24	; 0x05
    2c44:	3f c0       	rjmp	.+126    	; 0x2cc4 <main+0x258>
	else if (__tmp > 65535)
    2c46:	6f 81       	ldd	r22, Y+7	; 0x07
    2c48:	78 85       	ldd	r23, Y+8	; 0x08
    2c4a:	89 85       	ldd	r24, Y+9	; 0x09
    2c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	3f ef       	ldi	r19, 0xFF	; 255
    2c52:	4f e7       	ldi	r20, 0x7F	; 127
    2c54:	57 e4       	ldi	r21, 0x47	; 71
    2c56:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c5a:	18 16       	cp	r1, r24
    2c5c:	4c f5       	brge	.+82     	; 0x2cb0 <main+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e2       	ldi	r20, 0x20	; 32
    2c6c:	51 e4       	ldi	r21, 0x41	; 65
    2c6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	bc 01       	movw	r22, r24
    2c78:	cd 01       	movw	r24, r26
    2c7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	9e 83       	std	Y+6, r25	; 0x06
    2c84:	8d 83       	std	Y+5, r24	; 0x05
    2c86:	0f c0       	rjmp	.+30     	; 0x2ca6 <main+0x23a>
    2c88:	89 e1       	ldi	r24, 0x19	; 25
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	9c 83       	std	Y+4, r25	; 0x04
    2c8e:	8b 83       	std	Y+3, r24	; 0x03
    2c90:	8b 81       	ldd	r24, Y+3	; 0x03
    2c92:	9c 81       	ldd	r25, Y+4	; 0x04
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	f1 f7       	brne	.-4      	; 0x2c94 <main+0x228>
    2c98:	9c 83       	std	Y+4, r25	; 0x04
    2c9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca0:	01 97       	sbiw	r24, 0x01	; 1
    2ca2:	9e 83       	std	Y+6, r25	; 0x06
    2ca4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    2caa:	00 97       	sbiw	r24, 0x00	; 0
    2cac:	69 f7       	brne	.-38     	; 0x2c88 <main+0x21c>
    2cae:	14 c0       	rjmp	.+40     	; 0x2cd8 <main+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb2:	78 85       	ldd	r23, Y+8	; 0x08
    2cb4:	89 85       	ldd	r24, Y+9	; 0x09
    2cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	9e 83       	std	Y+6, r25	; 0x06
    2cc2:	8d 83       	std	Y+5, r24	; 0x05
    2cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc8:	9a 83       	std	Y+2, r25	; 0x02
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	f1 f7       	brne	.-4      	; 0x2cd0 <main+0x264>
    2cd4:	9a 83       	std	Y+2, r25	; 0x02
    2cd6:	89 83       	std	Y+1, r24	; 0x01
				{
					//if yes, so delay for 30 sec to avoid debouncing
					_delay_ms(30);
					/*check again for the button and temperature so that if
					they are true exit the loop*/
					if (GPIO_readPin(BUTTON_PORT,BUTTON_PIN) && temp <40)
    2cd8:	83 e0       	ldi	r24, 0x03	; 3
    2cda:	61 e0       	ldi	r22, 0x01	; 1
    2cdc:	0e 94 bf 09 	call	0x137e	; 0x137e <GPIO_readPin>
    2ce0:	88 23       	and	r24, r24
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <main+0x27a>
    2ce4:	55 cf       	rjmp	.-342    	; 0x2b90 <main+0x124>
    2ce6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce8:	88 32       	cpi	r24, 0x28	; 40
    2cea:	08 f0       	brcs	.+2      	; 0x2cee <main+0x282>
    2cec:	51 cf       	rjmp	.-350    	; 0x2b90 <main+0x124>
					}

				}
			}
			//clear the screen from the warning
			LCD_clearScreen();
    2cee:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_clearScreen>
    2cf2:	02 cf       	rjmp	.-508    	; 0x2af8 <main+0x8c>

00002cf4 <PWM_Timer0_Start>:
 *5. Setup the direction for OC0 as output pin through the GPIO driver.
 *6. The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 */

void PWM_Timer0_Start( uint8 duty_cycle )
{
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	0f 92       	push	r0
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
    2d00:	e2 e5       	ldi	r30, 0x52	; 82
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	10 82       	st	Z, r1

	OCR0  = duty_cycle ; // Set Compare Value
    2d06:	ec e5       	ldi	r30, 0x5C	; 92
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    2d0e:	a7 e3       	ldi	r26, 0x37	; 55
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	e7 e3       	ldi	r30, 0x37	; 55
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	88 60       	ori	r24, 0x08	; 8
    2d1a:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2d1c:	e3 e5       	ldi	r30, 0x53	; 83
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	8a e6       	ldi	r24, 0x6A	; 106
    2d22:	80 83       	st	Z, r24
}
    2d24:	0f 90       	pop	r0
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	08 95       	ret

00002d2c <__mulsi3>:
    2d2c:	62 9f       	mul	r22, r18
    2d2e:	d0 01       	movw	r26, r0
    2d30:	73 9f       	mul	r23, r19
    2d32:	f0 01       	movw	r30, r0
    2d34:	82 9f       	mul	r24, r18
    2d36:	e0 0d       	add	r30, r0
    2d38:	f1 1d       	adc	r31, r1
    2d3a:	64 9f       	mul	r22, r20
    2d3c:	e0 0d       	add	r30, r0
    2d3e:	f1 1d       	adc	r31, r1
    2d40:	92 9f       	mul	r25, r18
    2d42:	f0 0d       	add	r31, r0
    2d44:	83 9f       	mul	r24, r19
    2d46:	f0 0d       	add	r31, r0
    2d48:	74 9f       	mul	r23, r20
    2d4a:	f0 0d       	add	r31, r0
    2d4c:	65 9f       	mul	r22, r21
    2d4e:	f0 0d       	add	r31, r0
    2d50:	99 27       	eor	r25, r25
    2d52:	72 9f       	mul	r23, r18
    2d54:	b0 0d       	add	r27, r0
    2d56:	e1 1d       	adc	r30, r1
    2d58:	f9 1f       	adc	r31, r25
    2d5a:	63 9f       	mul	r22, r19
    2d5c:	b0 0d       	add	r27, r0
    2d5e:	e1 1d       	adc	r30, r1
    2d60:	f9 1f       	adc	r31, r25
    2d62:	bd 01       	movw	r22, r26
    2d64:	cf 01       	movw	r24, r30
    2d66:	11 24       	eor	r1, r1
    2d68:	08 95       	ret

00002d6a <__divmodhi4>:
    2d6a:	97 fb       	bst	r25, 7
    2d6c:	09 2e       	mov	r0, r25
    2d6e:	07 26       	eor	r0, r23
    2d70:	0a d0       	rcall	.+20     	; 0x2d86 <__divmodhi4_neg1>
    2d72:	77 fd       	sbrc	r23, 7
    2d74:	04 d0       	rcall	.+8      	; 0x2d7e <__divmodhi4_neg2>
    2d76:	0c d0       	rcall	.+24     	; 0x2d90 <__udivmodhi4>
    2d78:	06 d0       	rcall	.+12     	; 0x2d86 <__divmodhi4_neg1>
    2d7a:	00 20       	and	r0, r0
    2d7c:	1a f4       	brpl	.+6      	; 0x2d84 <__divmodhi4_exit>

00002d7e <__divmodhi4_neg2>:
    2d7e:	70 95       	com	r23
    2d80:	61 95       	neg	r22
    2d82:	7f 4f       	sbci	r23, 0xFF	; 255

00002d84 <__divmodhi4_exit>:
    2d84:	08 95       	ret

00002d86 <__divmodhi4_neg1>:
    2d86:	f6 f7       	brtc	.-4      	; 0x2d84 <__divmodhi4_exit>
    2d88:	90 95       	com	r25
    2d8a:	81 95       	neg	r24
    2d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8e:	08 95       	ret

00002d90 <__udivmodhi4>:
    2d90:	aa 1b       	sub	r26, r26
    2d92:	bb 1b       	sub	r27, r27
    2d94:	51 e1       	ldi	r21, 0x11	; 17
    2d96:	07 c0       	rjmp	.+14     	; 0x2da6 <__udivmodhi4_ep>

00002d98 <__udivmodhi4_loop>:
    2d98:	aa 1f       	adc	r26, r26
    2d9a:	bb 1f       	adc	r27, r27
    2d9c:	a6 17       	cp	r26, r22
    2d9e:	b7 07       	cpc	r27, r23
    2da0:	10 f0       	brcs	.+4      	; 0x2da6 <__udivmodhi4_ep>
    2da2:	a6 1b       	sub	r26, r22
    2da4:	b7 0b       	sbc	r27, r23

00002da6 <__udivmodhi4_ep>:
    2da6:	88 1f       	adc	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	5a 95       	dec	r21
    2dac:	a9 f7       	brne	.-22     	; 0x2d98 <__udivmodhi4_loop>
    2dae:	80 95       	com	r24
    2db0:	90 95       	com	r25
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	08 95       	ret

00002db8 <__prologue_saves__>:
    2db8:	2f 92       	push	r2
    2dba:	3f 92       	push	r3
    2dbc:	4f 92       	push	r4
    2dbe:	5f 92       	push	r5
    2dc0:	6f 92       	push	r6
    2dc2:	7f 92       	push	r7
    2dc4:	8f 92       	push	r8
    2dc6:	9f 92       	push	r9
    2dc8:	af 92       	push	r10
    2dca:	bf 92       	push	r11
    2dcc:	cf 92       	push	r12
    2dce:	df 92       	push	r13
    2dd0:	ef 92       	push	r14
    2dd2:	ff 92       	push	r15
    2dd4:	0f 93       	push	r16
    2dd6:	1f 93       	push	r17
    2dd8:	cf 93       	push	r28
    2dda:	df 93       	push	r29
    2ddc:	cd b7       	in	r28, 0x3d	; 61
    2dde:	de b7       	in	r29, 0x3e	; 62
    2de0:	ca 1b       	sub	r28, r26
    2de2:	db 0b       	sbc	r29, r27
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	f8 94       	cli
    2de8:	de bf       	out	0x3e, r29	; 62
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	cd bf       	out	0x3d, r28	; 61
    2dee:	09 94       	ijmp

00002df0 <__epilogue_restores__>:
    2df0:	2a 88       	ldd	r2, Y+18	; 0x12
    2df2:	39 88       	ldd	r3, Y+17	; 0x11
    2df4:	48 88       	ldd	r4, Y+16	; 0x10
    2df6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2df8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dfa:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dfc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dfe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e00:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e02:	b9 84       	ldd	r11, Y+9	; 0x09
    2e04:	c8 84       	ldd	r12, Y+8	; 0x08
    2e06:	df 80       	ldd	r13, Y+7	; 0x07
    2e08:	ee 80       	ldd	r14, Y+6	; 0x06
    2e0a:	fd 80       	ldd	r15, Y+5	; 0x05
    2e0c:	0c 81       	ldd	r16, Y+4	; 0x04
    2e0e:	1b 81       	ldd	r17, Y+3	; 0x03
    2e10:	aa 81       	ldd	r26, Y+2	; 0x02
    2e12:	b9 81       	ldd	r27, Y+1	; 0x01
    2e14:	ce 0f       	add	r28, r30
    2e16:	d1 1d       	adc	r29, r1
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	de bf       	out	0x3e, r29	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	ed 01       	movw	r28, r26
    2e24:	08 95       	ret

00002e26 <itoa>:
    2e26:	fb 01       	movw	r30, r22
    2e28:	9f 01       	movw	r18, r30
    2e2a:	e8 94       	clt
    2e2c:	42 30       	cpi	r20, 0x02	; 2
    2e2e:	c4 f0       	brlt	.+48     	; 0x2e60 <itoa+0x3a>
    2e30:	45 32       	cpi	r20, 0x25	; 37
    2e32:	b4 f4       	brge	.+44     	; 0x2e60 <itoa+0x3a>
    2e34:	4a 30       	cpi	r20, 0x0A	; 10
    2e36:	29 f4       	brne	.+10     	; 0x2e42 <itoa+0x1c>
    2e38:	97 fb       	bst	r25, 7
    2e3a:	1e f4       	brtc	.+6      	; 0x2e42 <itoa+0x1c>
    2e3c:	90 95       	com	r25
    2e3e:	81 95       	neg	r24
    2e40:	9f 4f       	sbci	r25, 0xFF	; 255
    2e42:	64 2f       	mov	r22, r20
    2e44:	77 27       	eor	r23, r23
    2e46:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__udivmodhi4>
    2e4a:	80 5d       	subi	r24, 0xD0	; 208
    2e4c:	8a 33       	cpi	r24, 0x3A	; 58
    2e4e:	0c f0       	brlt	.+2      	; 0x2e52 <itoa+0x2c>
    2e50:	89 5d       	subi	r24, 0xD9	; 217
    2e52:	81 93       	st	Z+, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	00 97       	sbiw	r24, 0x00	; 0
    2e58:	a1 f7       	brne	.-24     	; 0x2e42 <itoa+0x1c>
    2e5a:	16 f4       	brtc	.+4      	; 0x2e60 <itoa+0x3a>
    2e5c:	5d e2       	ldi	r21, 0x2D	; 45
    2e5e:	51 93       	st	Z+, r21
    2e60:	10 82       	st	Z, r1
    2e62:	c9 01       	movw	r24, r18
    2e64:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <strrev>

00002e68 <strrev>:
    2e68:	dc 01       	movw	r26, r24
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	67 2f       	mov	r22, r23
    2e6e:	71 91       	ld	r23, Z+
    2e70:	77 23       	and	r23, r23
    2e72:	e1 f7       	brne	.-8      	; 0x2e6c <strrev+0x4>
    2e74:	32 97       	sbiw	r30, 0x02	; 2
    2e76:	04 c0       	rjmp	.+8      	; 0x2e80 <strrev+0x18>
    2e78:	7c 91       	ld	r23, X
    2e7a:	6d 93       	st	X+, r22
    2e7c:	70 83       	st	Z, r23
    2e7e:	62 91       	ld	r22, -Z
    2e80:	ae 17       	cp	r26, r30
    2e82:	bf 07       	cpc	r27, r31
    2e84:	c8 f3       	brcs	.-14     	; 0x2e78 <strrev+0x10>
    2e86:	08 95       	ret

00002e88 <_exit>:
    2e88:	f8 94       	cli

00002e8a <__stop_program>:
    2e8a:	ff cf       	rjmp	.-2      	; 0x2e8a <__stop_program>
